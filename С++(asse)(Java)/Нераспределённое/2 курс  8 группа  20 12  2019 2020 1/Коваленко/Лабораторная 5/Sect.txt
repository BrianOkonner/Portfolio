package com.company;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        SectionX[] SecArr = new SectionX[3];
        SectionX sec;
        int cmp = 0, n = 0, cn1 = 0, cn2 = 0, cn3 = 0;
        System.out.println(" Start and end for 3 sections");
        for (int i = 0; i < 3; i++) {
            System.out.println(" Start of " + (i + 1) + "section");
            SecArr[i] = new SectionX(sc.nextInt(), sc.nextInt());
        }
        System.out.println();
        if (SecArr[0].equals(SecArr[1])) {

            System.out.println("1 &2 are the same ");
            cmp = 1;
        }
        if (SecArr[1].equals(SecArr[2])) {

            System.out.println("3 &2 are the same");
            cmp = 1;
        }
        if (SecArr[2].equals(SecArr[0])) {

            System.out.println("1 &3 are the same");
            cmp = 1;
        }
        if (cmp == 0) {
            System.out.println("No are the same");
        }
        cmp = 0;

        for (int i = 0; i < 2; i++) {

            if (SecArr[i].cmp(SecArr[i + 1]) == 1) {

                if (SecArr[i].GetX2() < SecArr[i + 1].GetX1()) {

                    if (SecArr[i + 1].GetX1() - SecArr[i].GetX2() > cmp) {

                        n = i * 10 + i + 1;
                        cmp = SecArr[i + 1].GetX1() - SecArr[i].GetX2();
                    }
                } else {

                    if (SecArr[i].GetX1() - SecArr[i + 1].GetX2() > cmp) {

                        n = i * 10 + i + 1;
                        cmp = SecArr[i].GetX1() - SecArr[i + 1].GetX2();
                    }
                }
            }
        }
        if (SecArr[2].cmp(SecArr[0]) == 1) {

            if (SecArr[2].GetX2() < SecArr[0].GetX1()) {

                if (SecArr[2].GetX1() - SecArr[0].GetX2() > cmp) {

                    n = 31;
                    cmp = SecArr[2].GetX1() - SecArr[0].GetX2();
                }
            } else {

                if (SecArr[0].GetX1() - SecArr[2].GetX2() > cmp) {

                    n = 31;
                    cmp = SecArr[0].GetX1() - SecArr[2].GetX2();
                }
            }
        }

        System.out.println(" Max distance between " + (n / 10 + 1) + " Ð¸ " + (n % 10 + 1)+ "Equals"+cmp);
        System.out.println(" Section to compare");
        cn1 = sc.nextInt();
        cn2 = sc.nextInt();

        while (cn1 > 0 && cn1 < 4 && cn2 > 0 && cn2 < 4) {

            if (SecArr[cn1 - 1].equals(SecArr[cn2 - 1])) {
                System.out.println("Are same");
            }

            if (SecArr[cn1 - 1].cmp(SecArr[cn2 - 1]) == 1) {
                System.out.println("Far away");
            }

            if (SecArr[cn1 - 1].cmp(SecArr[cn2 - 1]) == 2) {
                System.out.println("Touch");
            }

            if (SecArr[cn1 - 1].cmp(SecArr[cn2 - 1]) == 3) {
                System.out.println("Cross");
            }

            if (SecArr[cn1 - 1].cmp(SecArr[cn2 - 1]) == 4) {
                System.out.println("One in the other");
            }

            System.out.println();
            System.out.println(" Next to compare");
            cn1 = sc.nextInt();
            cn2 = sc.nextInt();
        }
        System.out.println();

        System.out.println(" Number to compare");
        cn1 = sc.nextInt();
        cn2 = sc.nextInt();
        System.out.println();

        while (cn1 > 0 && cn1 < 4 && cn2 > 0 && cn2 < 4) {
            System.out.println(" 1. Unite");
            System.out.println(" 2. Crossing");
            System.out.println(" 3. Subtract");
            cn3 = sc.nextInt();

            while (cn3 > 0 && cn3 < 4) {

                if (cn3 == 1) {

                    if (SecArr[cn1 - 1].Union(SecArr[cn2 - 1]) != SecArr[cn1 - 1]) {

                        System.out.println(" Result");
                        System.out.println(SecArr[cn1 - 1].Union(SecArr[cn2 - 1]).toString());
                    } else {
                        System.out.println("Error");
                    }
                }

                if (cn3 == 2) {

                    if (SecArr[cn1 - 1].Crossing(SecArr[cn2 - 1]) != SecArr[cn1 - 1]) {

                        System.out.println(" Result");
                        System.out.println(SecArr[cn1 - 1].Crossing(SecArr[cn2 - 1]).toString());
                    } else {
                        System.out.println("Error");
                    }
                }

                if (cn3 == 3) {

                    if (SecArr[cn1 - 1].Difference(SecArr[cn2 - 1]) != SecArr[cn1 - 1]) {

                        System.out.println("Result");
                        System.out.println(SecArr[cn1 - 1].Difference(SecArr[cn2 - 1]).toString());
                    } else {
                        System.out.println("Error");
                    }
                }

                System.out.println(" 1. Unite");
                System.out.println(" 2. Crossing");
                System.out.println(" 3. Subtract");
                cn3 = sc.nextInt();
            }

            System.out.println(" Number to compare");
            cn1 = sc.nextInt();
            cn2 = sc.nextInt();
        }

        for (int out = 2; out >= 1; out--) {
            for (int in2 = 0; in2 < out; in2++) {
                if (SecArr[in2].length() > SecArr[in2 + 1].length()) {
                    sec = SecArr[in2];
                    SecArr[in2] = SecArr[in2 + 1];
                    SecArr[in2 + 1] = sec;
                }
            }
        }

    }
}

class SectionX {
    private int x1;
    private int x2;

    public SectionX() {
        this.x1 = 0;
        this.x2 = -1;
    }

    public SectionX(int x1, int x2) {

        if (x1 == x2) {
            System.out.println(" It's a dot");
            System.exit(0);
        }

        this.x1 = x1;
        this.x2 = x2;
    }

    public void SetX1(int x1) {
        this.x1 = x1;
    }

    public int GetX1() {
        return this.x1;
    }

    public void SetX2(int x2) {
        this.x2 = x2;
    }

    public int GetX2() {
        return this.x2;
    }

    public int length() {
        return Math.abs(this.x2 - this.x1);
    }

    public int cmp(SectionX sec) {

        if ((this.GetX1() < sec.GetX2() && this.GetX1() > sec.GetX1() && this.GetX2() > sec.GetX2()) || (sec.GetX1() < this.GetX2() && sec.GetX1() > this.GetX1() && sec.GetX2() > this.GetX2())) {
            return 3;
        }

        if ((this.GetX1() <= sec.GetX1() && this.GetX2() >= sec.GetX2()) || (sec.GetX1() <= this.GetX1() && sec.GetX2() >= this.GetX2())) {
            return 4;
        }

        if ((this.GetX1() == sec.GetX2()) || (sec.GetX1() == this.GetX2())) {
            return 2;
        }

        return 1;
    }

    public SectionX Difference(SectionX sec) {

        if (this.cmp(sec) == 2 || this.cmp(sec) == 3) {
            SectionX diffsec = new SectionX();

            if (this.GetX1() < sec.GetX1()) {

                diffsec.SetX1(this.GetX1());
                diffsec.SetX2(sec.GetX1());
            } else {

                diffsec.SetX1(sec.GetX1());
                diffsec.SetX2(this.GetX1());
            }

            return diffsec;
        }

        return this;
    }

    public SectionX simmetric() {

        SectionX sec = new SectionX(-this.GetX2(), -this.GetX1());

        return sec;
    }

    public SectionX Crossing(SectionX sec) {

        if (this.cmp(sec) == 2 || this.cmp(sec) == 3) {
            SectionX crosssec = new SectionX();

            if (this.GetX1() < sec.GetX1()) {

                crosssec.SetX1(sec.GetX1());
                crosssec.SetX2(this.GetX2());
            } else {

                crosssec.SetX1(this.GetX1());
                crosssec.SetX2(sec.GetX2());
            }

            return crosssec;
        }

        return this;
    }

    public boolean equals(SectionX sec) {

        if (this == sec) {
            return true;
        }

        return (sec.GetX1() == this.x1) && (sec.GetX2() == this.x2);
    }

    public String toString() {
        String info;

        info = "Start " + this.x1 + " End " + this.x2;

        return info;
    }

    public SectionX Union(SectionX sec) {

        if (this.cmp(sec) == 2 || this.cmp(sec) == 3) {
            SectionX unionsec = new SectionX();

            if (this.GetX1() < sec.GetX1()) {

                unionsec.SetX1(this.GetX1());
                unionsec.SetX2(sec.GetX2());
            } else {

                unionsec.SetX1(sec.GetX1());
                unionsec.SetX2(this.GetX2());
            }

            return unionsec;
        }

        return this;
    }
}