import java.util.Arrays;
import java.util.Comparator;
import java.util.Objects;

class SectionX {
    private int x1;
    private int x2;

    public SectionX() {
        this.x1 = 0;
        this.x2 = 1;
    }

    public SectionX(int x1, int x2) {
        if (x1 <= x2) {
            this.x1 = x1;
            this.x2 = x2;
        } else {
            this.x1 = x2;
            this.x2 = x1;
        }

    }

    public int getX1() {
        return x1;
    }

    public void setX1(int x1) {
        this.x1 = x1;
    }

    public int getX2() {
        return x2;
    }

    public void setX2(int x2) {
        this.x2 = x2;
    }

    public double length() {
        return Math.abs(this.x2 - this.x1);
    }

    public SectionX simmetric() {
        SectionX newSectionX = new SectionX(-this.x1, -this.x2);
        return newSectionX;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (object == null || getClass() != object.getClass()) {
            return false;
        }
        SectionX sectionX = (SectionX) object;
        return (x1 == sectionX.x1) && (x2 == sectionX.x2);
    }

    public int position(SectionX sectionX) {
        if ((this.x1 == sectionX.x2) || (this.x2 == sectionX.x1)) {
            return 2;
        } else if (((this.x1 < sectionX.x1) && (this.x2 < sectionX.x2) && (this.x2 > sectionX.x1)) ||
                ((sectionX.x1 < this.x1) && (sectionX.x2 < this.x2) && (sectionX.x2 > this.x1))) {
            return 3;
        } else if (((this.x1 <= sectionX.x1) && (this.x2 >= sectionX.x2)) ||
                ((sectionX.x1 <= this.x1) && (sectionX.x2 >= this.x2))) {
            return 4;
        } else {
            return 1;
        }
    }

    public SectionX add(SectionX sectionX) {
        SectionX newSectionX = new SectionX();
        if ((this.position(sectionX) == 3) || (this.position(sectionX) == 4)) {
            if (this.x1 <= sectionX.x1) {
                newSectionX.setX1(this.x1);
            } else {
                newSectionX.setX1(sectionX.x1);
            }
            if (this.x2 <= sectionX.x2) {
                newSectionX.setX2(sectionX.x2);
            } else {
                newSectionX.setX2(this.x2);
            }
        }
        return newSectionX;
    }

    public SectionX sub(SectionX sectionX) {
        SectionX newSectionX = new SectionX();
        if (this.position(sectionX) == 4) {
            if (this.x1 == sectionX.x1) {
                if (this.x2 < sectionX.x2) {
                    newSectionX.setX1(this.x2);
                    newSectionX.setX2(sectionX.x2);
                } else {
                    newSectionX.setX1(sectionX.x2);
                    newSectionX.setX2(this.x2);
                }
            } else {
                if (this.x1 < sectionX.x1) {
                    newSectionX.setX1(this.x1);
                    newSectionX.setX2(sectionX.x1);
                } else {
                    newSectionX.setX1(sectionX.x1);
                    newSectionX.setX2(this.x1);
                }
            }
        }
        return newSectionX;
    }

    public SectionX cross(SectionX sectionX) {
        SectionX newSectionX = new SectionX();
        if (this.position(sectionX) == 2) {
            if (this.x1 == sectionX.x2) {
                newSectionX.setX1(this.x1);
                newSectionX.setX2(this.x1);
            } else {
                newSectionX.setX1(this.x2);
                newSectionX.setX2(this.x2);
            }
        } else if (this.position(sectionX) == 3) {
            if (this.x1 < sectionX.x1) {
                newSectionX.setX1(sectionX.x1);
            } else {
                newSectionX.setX1(this.x1);
            }
            if (this.x2 < sectionX.x2) {
                newSectionX.setX2(this.x2);
            } else {
                newSectionX.setX2(sectionX.x2);
            }
        } else if (this.position(sectionX) == 4) {
            if (this.x1 == sectionX.x1) {
                newSectionX.setX1(this.x1);
                if (this.x2 < sectionX.x2) {
                    newSectionX.setX2(this.x2);
                } else {
                    newSectionX.setX2(sectionX.x2);
                }
            } else {
                newSectionX.setX2(sectionX.x2);
                if (this.x1 < sectionX.x1) {
                    newSectionX.setX1(sectionX.x1);

                } else {
                    newSectionX.setX1(this.x1);
                }
            }
        }
        return newSectionX;
    }

    @Override
    public String toString() {
        return "(" + x1 + ", " + x2 + ')';
    }
}

class SectionSort implements Comparator<SectionX> {
    @Override
    public int compare(SectionX p1, SectionX p2) {
        if (p1.length() > p2.length()) {
            return -1;
        } else if (p1.length() < p2.length()) {
            return 1;
        }
        return 0;
    }
}

public class Zadanie1 {
    public static void main(String[] args) {
        SectionX[] arr = new SectionX[3];
        SectionX s1 = new SectionX(1, 3);
        SectionX s2 = new SectionX(4, 7);
        SectionX s3 = new SectionX(1, 3);
        arr[0] = s1;
        arr[1] = s2;
        arr[2] = s3;
        int max = 0;
        int maxI = 0;
        int maxJ = 0;


        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i].equals(arr[j])) {
                    System.out.println("Отрезки №" + (i + 1) + arr[i].toString() + " и №" + (j + 1) +
                            arr[j].toString() + " совпадают.");
                }
                if (arr[i].position(arr[j]) == 1) {
                    if (arr[j].getX2() - arr[i].getX1() > max) {
                        maxI = i;
                        maxJ = j;
                        max = arr[j].getX2() - arr[i].getX1();
                    }
                }
            }
        }
        System.out.println("\nОтрезки №" + (maxI + 1) + arr[maxI].toString() + " и №" + (maxJ + 1) + arr[maxJ].toString()
                + " находятся дальше всего друг от друга\n");

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                switch (arr[i].position(arr[j])) {
                    case 1:
                        System.out.println("Отрезки №" + (i + 1) + " и №" + (j + 1) +
                                " не пересекаются и не касаются.");
                        break;
                    case 2:
                        System.out.println("Отрезки №" + (i + 1) + " и №" + (j + 1) + " соприкасаются.");
                        SectionX temp = arr[i].cross(arr[j]);
                        System.out.println("Пересечение №" + (i + 1) + " и №" + (j + 1) + ": " + temp.toString());
                        break;
                    case 3:
                        System.out.println("Отрезки №" + (i + 1) + " и №" + (j + 1) + " пересекаются.");
                        SectionX temp1 = arr[i].cross(arr[j]);
                        System.out.println("Пересечение №" + (i + 1) + " и №" + (j + 1) + ": " + temp1.toString());
                        temp1 = arr[i].add(arr[j]);
                        System.out.println("Сложение №" + (i + 1) + " и №" + (j + 1) + ": " + temp1.toString());
                        break;
                    case 4:
                        System.out.println("Отрезки №" + (i + 1) + " и №" + (j + 1) +
                                ": один содержится внутри другого.");
                        SectionX temp2 = arr[i].cross(arr[j]);
                        System.out.println("Пересечение №" + (i + 1) + " и №" + (j + 1) + ": " + temp2.toString());
                        temp2 = arr[i].sub(arr[j]);
                        System.out.println("Разность №" + (i + 1) + " и №" + (j + 1) + ": " + temp2.toString());
                        break;

                }
            }
        }

        Arrays.sort(arr, new SectionSort());
        System.out.println("\nСортировка по длине: ");
        for (SectionX sectionX : arr) {
            System.out.println("Отрезок " + sectionX.toString() + " длиной " + sectionX.length());
        }
    }
}
