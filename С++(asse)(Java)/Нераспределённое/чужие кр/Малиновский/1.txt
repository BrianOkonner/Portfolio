/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kr;

/**
 *
 * @author lesha
 */
import java.io.*;
import java.util.*;

enum custType {
    fabrik, atele, person
}

class wrongCost extends Exception {
}

class wrongCell extends Exception {
}
class Comparer_num implements Comparator <Mex>
{
    public int compare(Mex a, Mex b)
    {
         if(a.getNum() == b.getNum())
            return 0;
        else
        {
            if(a.getNum()< b.getNum())
                return 1;
            else
                return -1;
        }
    }
}
class Comparer_cell implements Comparator <Mex>
{
    public int compare(Mex a, Mex b)
    {
        if(a.getCell() == b.getCell())
        {
         if(a.getCell() == b.getCell())
            return 0;
        else
        {
            if(a.getCell()< b.getCell())
                return 1;
            else
                return -1;
        }
        }else
        return 0;
    }
}
class Mex {

    protected final int id;
    protected final String name;
    protected final int num;
    protected final int cell;
    protected int cost;
    protected final custType type;
    protected static int count = 0;

    public Mex(String name, int num, int cell, int cost, custType type) throws wrongCost, wrongCell {

        count++;
        if (cell < 0) {
            throw new wrongCell();
        }
        if (cost <= 0) {
            throw new wrongCost();
        }
        this.id = count;
        this.name = name;
        this.num = num;
        this.cell = cell;
        this.cost = cost;
        this.type = type;

    }

    public Mex(Mex mex) {
        count++;

        this.id = count;
        this.name = mex.name;
        this.num = mex.num;
        this.cell = mex.cell;
        this.cost = mex.cost;
        this.type = mex.type;
    }

    public void setCost(int cost) throws wrongCost {
        if (cost <= 0) {
            throw new wrongCost();
        }
        this.cost = cost;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getCell() {
        return cell;
    }

    public int getCost() {
        return cost;
    }

    public custType getType() {
        return type;
    }

    public int get_count() {
        return count;
    }

    public int getNum() {
        return num;
    }

    @Override
    public String toString() {
        return "id = " + id + " " + "name = " + name + " " + "num= " + num + " " + "cell = " + cell + " " + "cost = " + cost + " " + "custType = " + type;
    }

}

class Auction {

    private Mex[] mex;

    public Auction(Mex[] mex) {
        this.mex = new Mex[mex.length];
        System.arraycopy(mex, 0, this.mex, 0, mex.length);
    }
      public String toString()
            {
                return Arrays.toString(this.mex);
            }
      public String getAucCell(int cell)
      {
          StringBuffer sb = new StringBuffer();
                for(Mex a: this.mex)
                {
                    if(a.getCell() > cell)
                    {
                        sb.append("\n");
                        sb.append(a);
                    }
                }
                return sb.toString();
                        
      }
      public String getSumType()
      {
          int t1=0;
          int t2=0;
          int t3 =0;
          
                for(Mex a: this.mex)
                {
                    if(a.getType()== custType.atele)
                    {
                       t1+=a.getCell();
                    }
                    if(a.getType()== custType.fabrik)
                    {
                       t2+=a.getCell();
                    }
                    if(a.getType()== custType.person)
                    {
                       t3+=a.getCell();
                    }
                }
                return "Продано atele: " + t1+ "Продано fabrik: " + t2 + "Продано person: "+ t3;
                        
      }
      public void sortbynum()
      {
          Arrays.sort(mex, new Comparer_num());
      }
      public void sortbycell()
      {
            Arrays.sort(mex, new Comparer_cell());
      }

       public String getAucMaxCell()
      {
          StringBuffer sb = new StringBuffer();
          int [][]temp = new int[mex.length][2]; 
          for(int i =0; i< mex.length; i++)
          {
              temp[i][0] = mex[i].getNum();
              temp[i][1]=0;
              
          }

          
                for(int i =0;i< mex.length; i++)
                {
                    for(int j =0; j< mex.length; j++)
                    {
                    if(temp[i][0] == mex[j].getNum())
                    {
                        temp[0][1] +=mex[j].getCell();
                    }
                    }
                }
                int p = temp[0][1];
                int n = 0;
                for(int i =0; i< mex.length; i++)
                {
                    if(temp[i][1]>p)
                    {
                        p = temp[i][1];
                        n = i;
                    }
                }
                for(int i =0; i< mex.length; i++)
                {
                    if(mex[i].getNum() ==mex[n].getNum() )
                    {
                         sb.append("\n");
                        sb.append(mex[i]);
                    }
                        
                }
                return sb.toString();
               
                        
      }
}

public class KR {

    /**
     * @param args the command line arguments
     */
//    protected final int id;
//    protected final String name;
//    protected final int num;
//    protected final int cell;
//    protected int cost;
//    protected final custType type;
//    protected static int count = 0;
    public static void main(String[] args)throws IOException, wrongCost, wrongCell {
        // TODO code application logic here
        FileInputStream ifr = new FileInputStream("input.txt");
        System.setProperty("console.encoding","Cp1251");
        Scanner sr = new Scanner(ifr ,"Cp1251");
        
        PrintStream pw = new PrintStream("output.txt");
        Mex[] mex = new Mex[4];
        int i =0;
        while(sr.hasNext())
        {
            String str = sr.nextLine();
            String a[]  =str.split(" ");
            String name = a[0];
            int num = Integer.parseInt(a[1]);
            int cell = Integer.parseInt(a[2]);
            int cost = Integer.parseInt(a[3]);
            custType type = custType.valueOf(a[4]);
             mex[i++] = new Mex(name,  num, cell, cost, type);
        }
        Auction auc =new Auction(mex);
        System.out.println("Все");
        System.out.println(auc.toString());
        System.out.println("Количество проданных больше 10");
        System.out.println(auc.getAucCell(10));
        System.out.println("Количество проданных по категории покупателя");
        System.out.println(auc.getSumType());
        System.out.println("Звероферма, продавшая максимальное число:");
         System.out.println(auc.getAucMaxCell());
        auc.sortbynum();
        auc.sortbycell();
        System.out.println("Сортировка:");
      System.out.println(auc.toString());
        
    }

}
