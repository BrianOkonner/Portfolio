//Бондарчук Владимир
//Группа 8
//курс 1

//1.1	Задано выражение(инфиксная форма, например(5 + 45)*(55 - 5))  содержащее числа(любого типа),
//знаки операций, круглые скобки.Записать его в виде обратной польской записи (постфиксная форма) и вычислить его значение. 

//Алгоритм:
//1.Выpажение сканиpyется слева напpаво, пpи этом pазбивая его  на  числа и знаки аpифметических опеpаций.
//2.Числа записываются в строку том же порядке, в каком встречаются в     исходном  выражении.
//3.Найденный текущий символ арифметической 	операции сравнивается с операцией из стека.
//4.Все операции с пpиоpитетом выше или pавным текyщемy выталкиваем из стека и пишем в выходнyю стpокy(выполнение опеpаций с одинаковым пpиоpитетом  бyдет пpоизводиться слева напpаво).
//5.Если пpиоpитет текyщей операции ниже находяйщейся в стеке или стек пустой, символ операции заносится в стек.
//6.Открывающая скобка заносится в стек.Считается, что ее приоритет ниже приоритета всех арифметических операций.При нахождении закрывающей  скобки все содержимое стека до первой открывающей скобки удаляется и записывается в строку.Открывающая скобка удаляется из стека и в строку не записывается.
//7. Когда достигнyт конец входного выpажения, выталкиваем из стека все что в нем есть в строку.
//8.Вычисление производится в обратном порядке
//9. В стек заносим числа, пока не встретим знак операции.Выполняем операцию над двумя числами  из стека и результат заносим в стек
//10.Процесс завершается когда стек пустой
//Вычесление:
//Рассматриваем поочередно каждый символ :
//1.Если очередной символ входной строки - число, то кладем его в стек.
//2.Если очередной символ - знак операции, то извлекаем из стека два верхних числа, 
//используем их в качестве операндов для этой операции, затем кладем результат обратно в стек.
//Когда вся входная строка будет разобрана в стеке должно остаться одно число, которое и будет результатом данного выражения.

//тест1:
//2 + (3 - 4) * 5
//polskaya zapis : 234 - 5 * +
//rezultat : -3

//тест2:
//(6 + 3 * (9 - 3) * 7) * 2
//polskaya zapis : 6393 - *7 * +2 *
//rezultat : 264

#include"Header.h"
stack <char> s;
stack <int> s1;
int main()
{
	char str[81]; char res[81]; res[0] = '\0';
	for (int k = 0; k < 81; k++){res[k] = '\0';}
	cin.getline(str, 81);
	int count = strlen(str);
	int j = 0;
	int i = 0;
	while (count)
	{
		char tmp = str[i];
		if (cifra(str[i]))
		{
			res[j] = tmp; j++;
		}
		else
			if (str[i] != ')'&&str[i] != '(')
			{
				{
					if (s.empty() || (prior(s.top()) < prior(str[i])))
					{
						s.push(tmp);
					}
					else
					{
						while (!s.empty() && (prior(s.top()) >= prior(str[i])))
						{
							char tmp1 = s.top();
							s.pop();
							res[j] = tmp1; j++;
						}
						s.push(str[i]);
					}
				}
			}
		if (str[i] == '(')
		{
			s.push(str[i]);
		}
		if (str[i] == ')')
		{
			while (s.top() != '(')
			{
				res[j] = s.top(); j++;
				s.pop();
			}
			s.pop();
		}
		count--;
		i++;
	}
	while (!s.empty())
	{
		res[j] = s.top(); j++;
		s.pop();
	}
	cout <<"polskaya zapis:" << res << endl;
	i = 0;
	count = strlen(res);
	while (count)
	{
		if (cifra(res[i]))
		{
			s1.push(Matoi(res[i]));
		}
		else
		{
			int tmp1 =s1.top();
			s1.pop();
			int tmp2 = s1.top();
			s1.pop();
			int tmp3 = operation(tmp1, tmp2, res[i]);
			s1.push(tmp3);
		}
		count--;
		i++;
	}
	int result = s1.top();
	cout << "rezultat:" <<  result << endl;
	system("pause");
	return 0;
}