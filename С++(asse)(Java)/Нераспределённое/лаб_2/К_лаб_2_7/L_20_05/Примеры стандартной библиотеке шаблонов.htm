<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0044)http://www.rsdn.ru/article/cpp/stl/sampl.xml -->
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List
href="./Примеры%20стандартной%20библиотеке%20шаблонов.files/filelist.xml">
<link rel=Edit-Time-Data
href="./Примеры%20стандартной%20библиотеке%20шаблонов.files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Руководство по стандартной библиотеке шаблонов (STL)</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>-</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>-</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>6</o:TotalTime>
  <o:Created>2006-05-20T01:57:00Z</o:Created>
  <o:LastSaved>2006-05-20T01:57:00Z</o:LastSaved>
  <o:Pages>84</o:Pages>
  <o:Words>14384</o:Words>
  <o:Characters>81989</o:Characters>
  <o:Lines>683</o:Lines>
  <o:Paragraphs>163</o:Paragraphs>
  <o:CharactersWithSpaces>100688</o:CharactersWithSpaces>
  <o:Version>9.2812</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>95</w:Zoom>
 </w:WordDocument>
</xml><![endif]-->
<link rel=Stylesheet type="text/css" media=all
href="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\article.css">
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helvetica;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Courier;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Geneva;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helv;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"MS Serif";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"MS Sans Serif";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"New York";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Mincho;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\660E\671D;
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Batang;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\BC14\D0D5;
	mso-font-charset:129;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:SimSun;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:PMingLiU;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\65B0\7D30\660E\9AD4;
	mso-font-charset:136;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 134742016 16 0 1048576 0;}
@font-face
	{font-family:Gothic;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\FF7B\FF9E\FF7C\FF6F\FF78;
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Dotum;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\B3CB\C6C0;
	mso-font-charset:129;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:SimHei;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\9ED1\4F53;
	mso-font-charset:134;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:MingLiU;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\7D30\660E\9AD4;
	mso-font-charset:136;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134742016 16 0 1048576 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:"\FF2D\FF33 \660E\671D";
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Gulim;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\AD74\B9BC;
	mso-font-charset:129;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:"MS Gothic";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:"\FF2D\FF33 \30B4\30B7\30C3\30AF";
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Century;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:553679495 -2147483648 8 0 66047 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536871559 0 0 0 415 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:left;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p
	{font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
code
	{mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
pre
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
p.code, li.code, div.code
	{mso-style-name:code;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.warning, li.warning, div.warning
	{mso-style-name:warning;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.note, li.note, div.note
	{mso-style-name:note;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.tip, li.tip, div.tip
	{mso-style-name:tip;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.title, li.title, div.title
	{mso-style-name:title;
	font-size:10.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";}
p.value, li.value, div.value
	{mso-style-name:value;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.subtitle1
	{mso-style-name:subtitle1;
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;
	mso-ascii-font-family:Verdana;
	mso-hansi-font-family:Verdana;
	font-weight:normal;}
p.title1, li.title1, div.title1
	{mso-style-name:title1;
	margin-right:0cm;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";
	color:#3570A0;}
p.value1, li.value1, div.value1
	{mso-style-name:value1;
	margin-right:0cm;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-style:italic;}
p.title2, li.title2, div.title2
	{mso-style-name:title2;
	margin-right:0cm;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";
	color:#3570A0;}
p.value2, li.value2, div.value2
	{mso-style-name:value2;
	margin-right:0cm;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;}
p.Web1, li.Web1, div.Web1
	{mso-style-name:"Обычный \(Web\)1";
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.HTML1, li.HTML1, div.HTML1
	{mso-style-name:"Стандартный HTML1";
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:left;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
p.Web2, li.Web2, div.Web2
	{mso-style-name:"Обычный \(Web\)2";
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.HTML2, li.HTML2, div.HTML2
	{mso-style-name:"Стандартный HTML2";
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:left;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
p.Web3, li.Web3, div.Web3
	{mso-style-name:"Обычный \(Web\)3";
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.HTML3, li.HTML3, div.HTML3
	{mso-style-name:"Стандартный HTML3";
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:left;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
p.code1, li.code1, div.code1
	{mso-style-name:code1;
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	background:#FFE4E4;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#FF5555;}
p.code2, li.code2, div.code2
	{mso-style-name:code2;
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	background:#F5F9FF;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#506580;}
p.code3, li.code3, div.code3
	{mso-style-name:code3;
	margin-top:3.6pt;
	margin-right:0cm;
	margin-bottom:1.2pt;
	margin-left:0cm;
	text-align:justify;
	mso-pagination:widow-orphan;
	background:#F5FFF5;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:#759545;}
span.msoIns
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:underline;
	text-underline:single;
	color:teal;}
span.msoDel
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:line-through;
	color:red;}
span.msoChangeProp
	{mso-style-type:export-only;
	mso-style-name:"";
	color:black;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:2.0cm 42.5pt 2.0cm 3.0cm;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>

<script language="JavaScript"  src="Примеры Руководство по стандартной библиотеке шаблонов (STL)_files/rsdn.js">
</script>

<script language="JavaScript"  src="Примеры Руководство по стандартной библиотеке шаблонов (STL)_files/Forum.js">
</script>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
<meta content="index,follow" name=robots>
</head>

<body bgcolor=white lang=RU link="#6677aa" vlink="#6677aa" style='tab-interval:
35.4pt' marginheight=20 marginwidth=20>

<div class=Section1>

<div>

<table border=1 cellspacing=0 cellpadding=0 width="100%" bgcolor="#e6e6e6"
 style='width:100.0%;mso-cellspacing:0cm;margin-left:3.95pt;background:#E6E6E6;
 border:solid #9DAABD .75pt;mso-padding-alt:0cm 3.95pt 0cm 3.95pt'
 celpadding=2>
 <tr>
  <td nowrap style='border:none;background:#F4F4F4;padding:0cm 3.95pt 0cm 3.95pt'>
  <p class=MsoNormal style='margin-top:3.95pt;margin-right:0cm;margin-bottom:
  3.95pt;margin-left:0cm;text-align:justify'><b><span style='font-size:10.0pt;
  font-family:Verdana;color:#646464'><script language="JavaScript"  src="Примеры Руководство по стандартной библиотеке шаблонов (STL)_files/shMenu.js" type="text/javascript">
  </script><o:p></o:p></span></b></p>
  </td>
  <td width="100%" nowrap style='width:100.0%;border:none;background:#F4F4F4;
  padding:0cm 3.95pt 0cm 3.95pt'>
  <p class=MsoNormal align=right style='margin-top:3.95pt;margin-right:0cm;
  margin-bottom:3.95pt;margin-left:0cm;text-align:right'><b><span
  style='font-size:10.0pt;font-family:Verdana;color:#646464'>&nbsp;<a
  href="http://www.rsdn.ru/article/cpp/stl/sampl.xml?print" target="_blank"
  title="Версия для печати"><span style='font-family:Tahoma'><img border=0
  width=16 height=14 id="_x0000_i1026"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\printer2.gif"
  align=absMiddle></span></a>&nbsp;&nbsp;<a
  href="http://www.rsdn.ru/forum/?mid=351161" target="_self"
  title="Перейти к обсуждению статьи"><span style='font-size:7.5pt;font-family:
  Tahoma;color:#646464'> Сообщений </span><span style='font-family:Tahoma;
  color:black'>1</span></a>&nbsp;&nbsp;<a
  href="http://www.rsdn.ru/forum/?mid=351161" target="_self"
  title="Перейти к обсуждению статьи"><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1027"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\showfr.gif"
  align=absMiddle></span></a>&nbsp;<a
  href="http://www.rsdn.ru/Forum/RateList.aspx?mid=351161"><span
  style='font-size:7.5pt;font-family:Tahoma;color:#646464'> Оценка </span><span
  style='font-family:Tahoma;color:black'>220</span></a>&nbsp;&nbsp; <a
  href="http://www.rsdn.ru/Users/Private/AddFav.aspx?mid=351161" target="_blank"
  title="Добавить в избранное"><span style='font-family:Tahoma'><img border=0
  width=14 height=14 id="_x0000_i1028"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\fav.gif"
  onclick="AddFav(351161);return false;" align=absMiddle></span></a>&nbsp;&nbsp;<a
  href="javascript:SubMsg(351161)" title="Подписка на сообщения"><span
  style='font-family:Tahoma'><img border=0 width=18 height=14 id="_x0000_i1029"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\sub.gif"
  class=i align=absMiddle></span></a>&nbsp;&nbsp;&nbsp;</span></b><b><span
  style='font-size:7.5pt;font-family:Verdana;color:#646464'>Оценить </span></b><b><span
  style='font-size:10.0pt;font-family:Verdana;color:#646464'><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=-3"
  target="_blank" title="+1"><span style='font-family:Tahoma'><img border=0
  width=18 height=14 id="_x0000_i1030"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n11.gif"
  onclick="RateMsg(351161,-3);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=1"
  target="_blank" title=Интересно><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1031"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n1.gif"
  onclick="RateMsg(351161,1);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=2"
  target="_blank" title=Спасибо><span style='font-family:Tahoma'><img border=0
  width=18 height=14 id="_x0000_i1032"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n2.gif"
  onclick="RateMsg(351161,2);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=3"
  target="_blank" title=Супер><span style='font-family:Tahoma'><img border=0
  width=18 height=14 id="_x0000_i1033"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n3.gif"
  onclick="RateMsg(351161,3);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=-1"
  target="_blank" title="Удалить оценку"><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1034"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\nx.gif"
  onclick="RateMsg(351161,-1);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=-4"
  target="_blank" title=Согласен><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1035"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\np.gif"
  onclick="RateMsg(351161,-4);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=0"
  target="_blank" title="Не согласен"><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1036"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\nm.gif"
  onclick="RateMsg(351161,0);return false;" align=absMiddle eight=14px></span></a>&nbsp;
  <o:p></o:p></span></b></p>
  </td>
 </tr>
</table>

</div>

<h1>

<iframe id=orphus
 src="Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files/orphus.htm"
 frameborder=0 width="100" scrolling=no height="25">
</iframe>

Руководство по стандартной библиотеке шаблонов (STL)</h1>

<h2><script language="JavaScript">
			function ToggleCode(id)
			{
			el=document.getElementById(id);
			img=document.getElementById("img"+id);
			if(el.style.display=="none")
			{
			img.src="/images/ls2.gif";
			el.style.display="";
			}
			else
			{
			img.src="/images/ls1.gif";
			el.style.display="none";
			}
			}
</script>Примеры программ с шаблонами<a name=EBA></a></h2>

<p><span style='color:black'>Эти примеры демонстрируют использование нового
продукта </span><i><span style='font-family:Arial;color:black'>STL</span></i><span
style='color:black'>&lt;</span><i><span style='font-family:Arial;color:black'>ToolKit</span></i><span
style='color:black'>&gt; от компании </span><i><span style='font-family:Arial;
color:black'>ObjectSpace</span></i><span style='color:black'>. </span><i><span
style='font-family:Arial;color:black'>STL</span></i><span style='color:black'>&lt;</span><i><span
style='font-family:Arial;color:black'>ToolKit</span></i><span style='color:
black'>&gt; - это самый простой способ использования </span><i><span
style='font-family:Arial;color:black'>STL</span></i><span style='color:black'>,
который работает на большинстве комбинаций платформ/компиляторов, включая </span><i><span
style='font-family:Arial;color:black'>cfront</span></i><span style='color:black'>,
</span><i><span style='font-family:Arial;color:black'>Borland</span></i><span
style='color:black'>, </span><i><span style='font-family:Arial;color:black'>Visual
C++</span></i><span style='color:black'>, </span><i><span style='font-family:
Arial;color:black'>Set C++</span></i><span style='color:black'>, </span><i><span
style='font-family:Arial;color:black'>ObjectCenter</span></i><span
style='color:black'> и последние компиляторы от </span><i><span
style='font-family:Arial;color:black'>Sun&amp;HP</span></i><span
style='color:black'>.<o:p></o:p></span></p>

<h3>accum1.cpp<a name=E0XO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XO0BA>#include</span><span style='color:black'> &lt;ospace/stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>5</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i + <span
  class=number>1</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> sum = accumulate (v.begin (), v.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;sum = &quot;</span><span style='color:black'> &lt;&lt; sum &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>accum2.cpp<a name=E0VO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> mult (</span><span class=keyword>int</span><span
  style='color:black'> initial_, </span><span class=keyword>int</span><span
  style='color:black'> element_)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> initial_ * element_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <span style="mso-spacerun: yes"> </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>5</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i + <span
  class=number>1</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> prod = accumulate (v.begin (), v.end (), <span
  class=number>1</span>, mult);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;prod = &quot;</span><span style='color:black'> &lt;&lt; prod &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>search2.cpp<a name=E0TO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_equal (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) == <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* grades[] = { </span><span class=string>&quot;A&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;B&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;C&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;D&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;F&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'>* letters[] = { </span><span
  class=string>&quot;Q&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;E&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;D&quot;</span><span style='color:black'> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> gradeCount = </span><span
  class=keyword>sizeof</span><span style='color:black'> (grades) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (grades[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> letterCount = </span><span
  class=keyword>sizeof</span><span style='color:black'> (letters) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (letters[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;grades: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (grades, grades + gradeCount, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nletters:&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (letters, letters + letterCount, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'>** location =<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>search (grades, grades + gradeCount,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">            </span>letters, letters + letterCount,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">            </span>str_equal);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location == grades + gradeCount)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;letters not found in grades&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;letters found in grades at offset: &quot;</span><span
  style='color:black'> &lt;&lt; location - grades &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (grades + <span
  class=number>1</span>, grades + <span class=number>1</span> + letterCount, letters);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;grades: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (grades, grades + gradeCount, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nletters:&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (letters, letters + letterCount, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = search (grades, grades + gradeCount,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>letters, letters + letterCount,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>str_equal);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location == grades + gradeCount)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;letters not found in grades&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot;letters found in grades at offset: &quot;</span><span
  style='color:black'> &lt;&lt; location - grades &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>incl2.cpp<a name=E0RO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> compare_strings (</span><span class=keyword>const char</span><span
  style='color:black'>* s1_, </span><span class=keyword>const char</span><span
  style='color:black'>* s2_)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (s1_, s2_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* names[] = {<span style="mso-spacerun: yes">  </span></span><span
  class=string>&quot;Todd&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;Mike&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;Graham&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;Jack&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;Brett&quot;</span><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> nameSize = </span><span
  class=keyword>sizeof</span><span style='color:black'> (names)/</span><span
  class=keyword>sizeof</span><span style='color:black'> (names[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; v1(nameSize);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = names[i];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; v2 (<span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v2[<span
  class=number>0</span>] = </span><span class=string>&quot;foo&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v2[<span
  class=number>1</span>] = </span><span class=string>&quot;bar&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>sort (v1.begin (), v1.end (), compare_strings);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (v2.begin (), v2.end (), compare_strings);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool</span><span style='color:black'> inc = includes (v1.begin (), v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                       </span>v2.begin (), v2.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                       </span>compare_strings);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (inc)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 includes v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 does not include v2&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v2[<span
  class=number>0</span>] = </span><span class=string>&quot;Brett&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v2[<span
  class=number>1</span>] = </span><span class=string>&quot;Todd&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>inc = includes (v1.begin (), v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">              </span><span style="mso-spacerun: yes">    </span>v2.begin (), v2.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                  </span>compare_strings);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (inc)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 includes v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 does not include v2&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>search1.cpp<a name=E0PO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; IntVec;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVec v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>IntVec v2 (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v2.begin (), v2.end (), <span
  class=number>50</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVec::iterator location;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = search (v1.begin (), v1.end (), v2.begin (), v2.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location == v1.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v2 not contained in v1&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Found v2 in v1 at offset: &quot;</span><span
  style='color:black'> &lt;&lt; location - v1.begin () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>iota (v2.begin (), v2.end (), <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = search (v1.begin (), v1.end (), v2.begin (), v2.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location == v1.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v2 not contained in v1&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Found v2 in v1 at offset: &quot;</span><span
  style='color:black'> &lt;&lt; location - v1.begin () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>istmit2.cpp<a name=E0NO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NO0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;fstream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>typedef</span><span
  style='color:black'> vector&lt;</span><span class=keyword>char</span><span
  style='color:black'>&gt; Line;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'> <o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>void</span><span
  style='color:black'> printLine (</span><span class=keyword>const</span><span
  style='color:black'> Line* line_)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt;::const_iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = line_-&gt;begin (); i != line_-&gt;end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span>cout &lt;&lt; *i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>Line buffer;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;Line*&gt; lines;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ifstream s (</span><span
  class=string>&quot;data.txt&quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.unsetf (ios::skipws); </span><span
  class=comment>// Disable white-space skipping.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>istream_iterator&lt;</span><span
  class=keyword>char</span><span style='color:black'>, ptrdiff_t&gt; it1 (s); </span><span
  class=comment>// Position at start of file.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>istream_iterator&lt;</span><span
  class=keyword>char</span><span style='color:black'>, ptrdiff_t&gt; it2; </span><span
  class=comment>// Serves as &quot;past-the-end&quot; marker.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (it1, it2, back_inserter (buffer));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>Line::iterator i = buffer.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>Line::iterator p;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (i != buffer.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>p = find (i, buffer.end (), <span
  class=character>'\n'</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>lines.push_back (</span><span
  class=keyword>new</span><span style='color:black'> Line (i, p));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>i = ++p;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (lines.begin (), lines.end (), less_p&lt;Line*&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Read &quot;</span><span style='color:black'> &lt;&lt; lines.size () &lt;&lt; </span><span
  class=string>&quot; lines&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;Line*&gt;::iterator j;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (j = lines.begin (); j != lines.end (); j++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>printLine (*j);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>release (lines.begin (), lines.end ()); </span><span
  class=comment>// Release memory.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>alloc1.cpp<a name=E0LO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;ospace/stl/examples/myaloc.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;vectors:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>os_my_allocator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; alloc;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v3 (alloc);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v3.push_back (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v4 (alloc);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v4.push_back (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;bit_vectors:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>os_my_allocator&lt;</span><span
  class=keyword>unsigned int</span><span style='color:black'>&gt; alloc;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>bit_vector v1 (alloc);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;deques:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>os_my_allocator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; alloc;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; d (alloc);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>d.push_back (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;lists:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>os_my_allocator&lt;os_list_node&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; alloc;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; l (alloc);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>l.push_back (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;sets:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>os_my_allocator&lt;os_value_node&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; alloc;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>set&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; s (alloc);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>s.insert (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;maps&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>os_my_allocator&lt;os_value_node&lt;os_pair&lt;</span><span
  class=keyword>const int</span><span style='color:black'>, </span><span
  class=keyword>float</span><span style='color:black'>&gt; &gt; &gt; alloc;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>map&lt;</span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>float</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; m (alloc);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>m[<span
  class=number>4</span>] = <span class=number>2.0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>release2.cpp<a name=E0JO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>class</span><span
  style='color:black'> X<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>public</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>X (</span><span
  class=keyword>int</span><span style='color:black'> i_) : i (i_) {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>~X () { cout &lt;&lt; </span><span
  class=string>&quot;Delete X(&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;)&quot;</span><span style='color:black'> &lt;&lt; endl; }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int</span><span style='color:black'> i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>ostream&amp; </span><span
  class=keyword>operator</span><span style='color:black'> &lt;&lt; (ostream&amp; stream_, </span><span
  class=keyword>const</span><span style='color:black'> X&amp; x_)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> stream_ &lt;&lt; </span><span
  class=string>&quot;X(&quot;</span><span style='color:black'> &lt;&lt; x_.i &lt;&lt; </span><span
  class=string>&quot;)&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;X*&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (</span><span
  class=keyword>new</span><span style='color:black'> X (<span class=number>2</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (</span><span
  class=keyword>new</span><span style='color:black'> X (<span class=number>1</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (</span><span
  class=keyword>new</span><span style='color:black'> X (<span class=number>4</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;X*&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Initial contents:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v.begin (); i != v.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;<span style="mso-spacerun: yes">  </span>&quot;</span><span
  style='color:black'> &lt;&lt; *(*i) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>release (v.begin ()); </span><span
  class=comment>// Delete the first heap-based object.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.erase (v.begin ()); </span><span
  class=comment>// Erase the first element.<span style="mso-spacerun: yes">  </span></span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Remaining contents:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v.begin (); i != v.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;<span style="mso-spacerun: yes">  </span>&quot;</span><span
  style='color:black'> &lt;&lt; *(*i) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>release (v.begin (), v.end ()); </span><span
  class=comment>// Delete remaining heap-based objects.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.erase (v.begin (), v.end ()); </span><span
  class=comment>// Erase remaining elements.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>map1.cpp<a name=E0HO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HO0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> map&lt;</span><span
  class=keyword>char</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; &gt; maptype;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>maptype m;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Store mappings between roman numerals and decimals.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>m[<span
  class=character>'l'</span>] = <span class=number>50</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>m[<span
  class=character>'x'</span>] = <span class=number>20</span>; </span><span
  class=comment>// Deliberate mistake.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>m[<span
  class=character>'v'</span>] = <span class=number>5</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>m[<span
  class=character>'i'</span>] = <span class=number>1</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;m['x'] = &quot;</span><span style='color:black'> &lt;&lt; m[<span
  class=character>'x'</span>] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>m[<span
  class=character>'x'</span>] = <span class=number>10</span>; </span><span
  class=comment>// Correct mistake.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;m['x'] = &quot;</span><span style='color:black'> &lt;&lt; m[<span
  class=character>'x'</span>] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;m['z'] = &quot;</span><span style='color:black'> &lt;&lt; m[<span
  class=character>'z'</span>] &lt;&lt; endl; </span><span class=comment>// Note default value is added.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;m.count ('z') = &quot;</span><span style='color:black'> &lt;&lt; m.count (<span
  class=character>'z'</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair&lt;maptype::iterator, </span><span
  class=keyword>bool</span><span style='color:black'>&gt; p;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>p = m.insert (pair&lt;</span><span
  class=keyword>const char</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>&gt; (<span
  class=character>'c'</span>, <span class=number>100</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p.second)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;First insertion successful&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>p = m.insert (pair&lt;</span><span
  class=keyword>const char</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>&gt; (<span
  class=character>'c'</span>, <span class=number>100</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p.second)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Second insertion successful&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Existing pair &quot;</span><span style='color:black'> &lt;&lt; (*(p.first)).first<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">         </span>&lt;&lt; </span><span
  class=string>&quot; -&gt; &quot;</span><span style='color:black'> &lt;&lt; (*(p.first)).second &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mismtch2.cpp<a name=E0FO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_equal (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) == <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>const unsigned</span><span
  style='color:black'> size = <span class=number>5</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* n1[size] = { </span><span class=string>&quot;Brett&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Graham&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Jack&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Mike&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Todd&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'>* n2[size];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (n1, n1 + <span
  class=number>5</span>, n2);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair &lt;</span><span
  class=keyword>char</span><span style='color:black'>**, </span><span
  class=keyword>char</span><span style='color:black'>**&gt; result;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>result = mismatch (n1, n1+ size, n2, str_equal);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (result.first == n1 + size &amp;&amp; result.second == n2 + size)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;n1 and n2 are the same&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;mismatch at index: &quot;</span><span style='color:black'> &lt;&lt; (result.first - n1) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>n2[<span
  class=number>2</span>] = </span><span class=string>&quot;QED&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>result = mismatch (n1, n1 + size, n2, str_equal);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (result.first == n2 + size &amp;&amp; result.second == n2 + size)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;n1 and n2 are the same&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;mismatch at index: &quot;</span><span style='color:black'> &lt;&lt; (result.first - n1) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mismtch1.cpp<a name=E0DO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DO0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; IntVec;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVec v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>IntVec v2 (v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v2.begin (), v2.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>pair &lt;IntVec::iterator, IntVec::iterator&gt; result;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>result = mismatch (v1.begin (), v1.end (), v2.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (result.first == v1.end () &amp;&amp; result.second == v2.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 and v2 are the same&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;mismatch at index: &quot;</span><span style='color:black'> &lt;&lt; (result.first - v1.begin ()) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v2[v2.size()/<span
  class=number>2</span>] = <span class=number>42</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>result = mismatch (v1.begin (), v1.end (), v2.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (result.first == v1.end () &amp;&amp; result.second == v2.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 and v2 are the same&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;mismatch at index: &quot;</span><span style='color:black'> &lt;&lt; (result.first - v1.begin ()) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mmap2.cpp<a name=E0BO0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EA0BO0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>typedef</span><span
  style='color:black'> multimap&lt;</span><span class=keyword>int</span><span
  style='color:black'>, </span><span class=keyword>char</span><span
  style='color:black'>, less&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; &gt; mmap;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>typedef</span><span
  style='color:black'> pair&lt;</span><span class=keyword>const int</span><span
  style='color:black'>, </span><span class=keyword>char</span><span
  style='color:black'>&gt; pair_type;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>pair_type p1 (<span
  class=number>3</span>, <span class=character>'c'</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>pair_type p2 (<span
  class=number>6</span>, <span class=character>'f'</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>pair_type p3 (<span
  class=number>1</span>, <span class=character>'a'</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>pair_type p4 (<span
  class=number>2</span>, <span class=character>'b'</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>pair_type p5 (<span
  class=number>3</span>, <span class=character>'x'</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>pair_type p6 (<span
  class=number>6</span>, <span class=character>'f'</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>pair_type array [] =<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span><span style="mso-spacerun: yes"> </span>p1,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>p2,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>p3,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>p4,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>p5,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>p6<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mmap m (array, array + <span
  class=number>7</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>mmap::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Return location of first element that is not less than 3</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i = m.lower_bound (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;lower bound:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; (*i).first &lt;&lt; </span><span
  class=string>&quot; -&gt; &quot;</span><span style='color:black'> &lt;&lt; (*i).second &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Return location of first element that is greater than 3</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i = m.upper_bound (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;upper bound:&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; (*i).first &lt;&lt; </span><span
  class=string>&quot; -&gt; &quot;</span><span style='color:black'> &lt;&lt; (*i).second &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>adjfind2.cpp<a name=E06N0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06N0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>typedef</span><span
  style='color:black'> vector &lt;</span><span class=keyword>char</span><span
  style='color:black'>*&gt; CStrVector;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> equal_length (</span><span class=keyword>const char</span><span
  style='color:black'>* v1_, </span><span class=keyword>const char</span><span
  style='color:black'>* v2_)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strlen (v1_) == ::strlen(v2_);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* names[] = { </span><span class=string>&quot;Brett&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Graham&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Jack&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Mike&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Todd&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const int</span><span style='color:black'> nameCount = </span><span
  class=keyword>sizeof</span><span style='color:black'> (names)/</span><span
  class=keyword>sizeof</span><span style='color:black'>(names[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>CStrVector v (nameCount);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; nameCount; i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = names[i];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>CStrVector::iterator location;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = adjacent_find (v.begin (), v.end (), equal_length);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location != v.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot;Found two adjacent strings of equal length: &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; *location<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot; -and- &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; *(location + <span
  class=number>1</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Didn't find two adjacent strings of equal length.&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>list3.cpp<a name=E04N0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04N0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'> array [] = { <span class=character>'x'</span>, <span
  class=character>'l'</span>, <span class=character>'x'</span>, <span
  class=character>'t'</span>, <span class=character>'s'</span>, <span
  class=character>'s'</span> };<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; str (array, array + <span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;original: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = str.begin (); i != str.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;reversed: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>str.reverse ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = str.begin (); i != str.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;removed: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>str.remove (<span
  class=character>'x'</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = str.begin (); i != str.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <span style="mso-spacerun: yes"> </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;uniqued: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>str.unique ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = str.begin (); i != str.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;sorted: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>str.sort ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = str.begin (); i != str.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>parsrtc2.cpp<a name=E02N0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02N0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_compare (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* names[] = { </span><span class=string>&quot;aa&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;ff&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;dd&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;ee&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;cc&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;bb&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> nameSize = </span><span
  class=keyword>sizeof</span><span style='color:black'> (names) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (names[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; v1 (nameSize);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = names[i];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; result (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>partial_sort_copy (v1.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>result.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>result.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>str_compare);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec6.cpp<a name=E0ZN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZN0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>1</span>, <span
  class=number>4</span>, <span class=number>9</span>, <span class=number>16</span>, <span
  class=number>25</span>, <span class=number>36</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (array, array + <span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; v[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.erase (v.begin ()); </span><span
  class=comment>// Erase first element.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; v[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.erase (v.end () - <span
  class=number>1</span>); </span><span class=comment>// Erase last element.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; v[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.erase (v.begin () + <span
  class=number>1</span>, v.end () - <span class=number>1</span>); </span><span
  class=comment>// Erase all but first and last.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; v[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.erase (); </span><span
  class=comment>// Erase all.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>inrprod2.cpp<a name=E0XN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> add (</span><span class=keyword>int</span><span
  style='color:black'> a_, </span><span class=keyword>int</span><span
  style='color:black'> b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ + b_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> mult (</span><span class=keyword>int</span><span
  style='color:black'> a_, </span><span class=keyword>int</span><span
  style='color:black'> b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ * b_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i + <span
  class=number>1</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>v2[i] = v1.size () - i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Inner product (product of sums):\n\t&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\n\t&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result =<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>inner_product (v1.begin (), v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                   </span>v2.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                   </span><span
  class=number>1</span>,<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">                   </span>mult, add);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nis: &quot;</span><span style='color:black'> &lt;&lt; result &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mmap1.cpp<a name=E0VN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VN0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> multimap&lt;</span><span
  class=keyword>char</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; &gt; mmap;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mmap m;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count ('X') = &quot;</span><span style='color:black'> &lt;&lt; m.count (<span
  class=character>'X'</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>m.insert (pair&lt;</span><span
  class=keyword>const char</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>&gt; (<span
  class=character>'X'</span>, <span class=number>10</span>)); </span><span
  class=comment>// Standard way.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count ('X') = &quot;</span><span style='color:black'> &lt;&lt; m.count (<span
  class=character>'X'</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>m.insert (<span
  class=character>'X'</span>, <span class=number>20</span>); </span><span
  class=comment>// Non-standard, but very convenient!</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count ('X') = &quot;</span><span style='color:black'> &lt;&lt; m.count (<span
  class=character>'X'</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>m.insert (<span
  class=character>'Y'</span>, <span class=number>32</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mmap::iterator i = m.find (<span
  class=character>'X'</span>); </span><span class=comment>// Find first match.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (i != m.end ()) </span><span
  class=comment>// Loop until end is reached.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; (*i).first &lt;&lt; </span><span
  class=string>&quot; -&gt; &quot;</span><span style='color:black'> &lt;&lt; (*i).second &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>i++;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> count = m.erase (<span
  class=character>'X'</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Erased &quot;</span><span style='color:black'> &lt;&lt; count &lt;&lt; </span><span
  class=string>&quot; items&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>adjfind0.cpp<a name=E0TN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers1 [<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>8</span>, <span class=number>16</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers2 [<span class=number>5</span>] = { <span
  class=number>5</span>, <span class=number>3</span>, <span class=number>2</span>, <span
  class=number>1</span>, <span class=number>1</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* location = adjacent_find (numbers1, numbers1 + <span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location != numbers1 + <span
  class=number>5</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot;Found adjacent pair of: &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; *location<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot; at offset &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; (location - numbers1)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;No adjacent pairs&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = adjacent_find (numbers2, numbers2 + <span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location != numbers2 + <span
  class=number>5</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot;Found adjacent pair of: &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; *location<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot; at offset &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span><span style="mso-spacerun: yes">   </span>&lt;&lt; (location - numbers2)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;No adjacent pairs&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>parsrt2.cpp<a name=E0RN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_compare (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* names[] = { </span><span class=string>&quot;aa&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;ff&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;dd&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;ee&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;cc&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;bb&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> nameSize = </span><span
  class=keyword>sizeof</span><span style='color:black'> (names) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (names[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; v1 (nameSize);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = names[i];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sort (v1.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                </span>v1.begin () + nameSize / <span
  class=number>2</span>,<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">                </span>v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                </span>str_compare);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mset5.cpp<a name=E0PN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PN0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> less_than (</span><span class=keyword>int</span><span
  style='color:black'> a_, </span><span class=keyword>int</span><span
  style='color:black'> b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ &lt; b_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> greater_than (</span><span class=keyword>int</span><span
  style='color:black'> a_, </span><span class=keyword>int</span><span
  style='color:black'> b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ &gt; b_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>3</span>, <span
  class=number>6</span>, <span class=number>1</span>, <span class=number>9</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> pointer_to_binary_function&lt;</span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>bool</span><span style='color:black'>&gt; fn_type;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> multiset&lt;</span><span
  class=keyword>int</span><span style='color:black'>, fn_type&gt; mset;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>fn_type f (less_than);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mset s1 (array, array + <span
  class=number>4</span>, f);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mset::const_iterator i = s1.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Using less_than: &quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (i != s1.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i++ &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>fn_type g (greater_than);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mset s2 (array, array + <span
  class=number>4</span>, g);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>i = s2.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Using greater_than: &quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (i != s2.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i++ &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mset1.cpp<a name=E0NN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NN0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> multiset&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; mset;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mset s;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count (42) = &quot;</span><span style='color:black'> &lt;&lt; s.count (<span
  class=number>42</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.insert (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count (42) = &quot;</span><span style='color:black'> &lt;&lt; s.count (<span
  class=number>42</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.insert (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count (42) = &quot;</span><span style='color:black'> &lt;&lt; s.count (<span
  class=number>42</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt;::iterator i = s.find (<span
  class=number>40</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (i == s.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;40 Not found&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Found &quot;</span><span style='color:black'> &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>i = s.find (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (i == s.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Not found&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Found &quot;</span><span style='color:black'> &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> count = s.erase (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Erased &quot;</span><span style='color:black'> &lt;&lt; count &lt;&lt; </span><span
  class=string>&quot; instances&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec2.cpp<a name=E0LN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LN0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>void</span><span
  style='color:black'> print (vector&lt;</span><span class=keyword>double</span><span
  style='color:black'>&gt;&amp; vector_)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; vector_.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; vector_[i] &lt;&lt; </span><span
  class=string>&quot; &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>double</span><span style='color:black'>&gt; v1; </span><span
  class=comment>// Empty vector of doubles.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1.push_back (<span
  class=number>32.1</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1.push_back (<span
  class=number>40.5</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>double</span><span style='color:black'>&gt; v2; </span><span
  class=comment>// Another empty vector of doubles.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v2.push_back (<span
  class=number>3.56</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 = &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>print (v1);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v2 = &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>print (v2);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1.swap (v2); </span><span
  class=comment>// Swap the vector's contents.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 = &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>print (v1);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v2 = &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>print (v2);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v2 = v1; </span><span
  class=comment>// Assign one vector to another.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v2 = &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>print (v2);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>uniqcpy2.cpp<a name=E0JN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_equal (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) == <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* labels[] = { </span><span class=string>&quot;Q&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;Q&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;W&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;W&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;E&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;E&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;R&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;T&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;T&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;Y&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;Y&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> count = </span><span
  class=keyword>sizeof</span><span style='color:black'> (labels) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (labels[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; iter (cout);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (labels, labels + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'>* uCopy[count];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>fill (uCopy, uCopy + count, </span><span
  class=string>&quot;&quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>unique_copy (labels, labels + count, uCopy, str_equal);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (labels, labels + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (uCopy, uCopy + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mismtch0.cpp<a name=E0HN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> n1[<span class=number>5</span>] = { <span class=number>1</span>, <span
  class=number>2</span>, <span class=number>3</span>, <span class=number>4</span>, <span
  class=number>5</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> n2[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> n3[<span class=number>5</span>] = { <span class=number>1</span>, <span
  class=number>2</span>, <span class=number>3</span>, <span class=number>2</span>, <span
  class=number>1</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair &lt;</span><span
  class=keyword>int</span><span style='color:black'>*, </span><span
  class=keyword>int</span><span style='color:black'>*&gt; result;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>result = mismatch (n1, n1 + <span
  class=number>5</span>, n2);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (result.first == (n1 + <span
  class=number>5</span>) &amp;&amp; result.second == (n2 + <span class=number>5</span>))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;n1 and n2 are the same&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Mismatch at offset: &quot;</span><span style='color:black'> &lt;&lt; (result.first - n1) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>result = mismatch (n1, n1 + <span
  class=number>5</span>, n3);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (result.first == (n1 + <span
  class=number>5</span>) &amp;&amp; result.second == (n3 + <span class=number>5</span>))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;n1 and n3 are the same&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Mismatch at offset: &quot;</span><span style='color:black'> &lt;&lt; (result.first - n1) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rndshuf2.cpp<a name=E0FN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>class</span><span
  style='color:black'> MyRandomGenerator<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>public</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>unsigned long operator</span><span style='color:black'> () (</span><span
  class=keyword>unsigned long</span><span style='color:black'> n_);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>unsigned long</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>MyRandomGenerator::</span><span class=keyword>operator</span><span
  style='color:black'> () (</span><span class=keyword>unsigned long</span><span
  style='color:black'> n_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> rand () % n_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1(<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>MyRandomGenerator r;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>random_shuffle (v1.begin (), v1.end (), r);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>merge2.cpp<a name=E0DN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = <span
  class=number>10</span> - i;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v2[i] =<span style="mso-spacerun: yes">  </span><span
  class=number>7</span> - i;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; result (v1.size () + v2.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>merge (v1.begin (), v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">         </span>v2.begin (), v2.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">         </span>result.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">         </span>greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;() );<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (result.begin (), result.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>adjfind1.cpp<a name=E0BN0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BN0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; IntVector;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVector v (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVector::iterator location;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = adjacent_find (v.begin (), v.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location != v.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Found adjacent pair of: &quot;</span><span
  style='color:black'> &lt;&lt; *location &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;No adjacent pairs&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v[<span
  class=number>6</span>] = <span class=number>7</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = adjacent_find (v.begin (), v.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location != v.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Found adjacent pair of: &quot;</span><span
  style='color:black'> &lt;&lt; *location &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;No adjacent pairs&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec7.cpp<a name=E06M0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06M0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array1 [] = { <span class=number>1</span>, <span
  class=number>4</span>, <span class=number>25</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array2 [] = { <span class=number>9</span>, <span
  class=number>16</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (array1, array1 + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.insert (v.begin (), <span
  class=number>0</span>); </span><span class=comment>// Insert before first element.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.insert (v.end (), <span
  class=number>36</span>); </span><span class=comment>// Insert after last element.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; v[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Insert contents of array2 before fourth element.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.insert (v.begin () + <span
  class=number>3</span>, array2, array2 + <span class=number>2</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; v[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bcompos1.cpp<a name=E04M0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04M0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> odd : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>int</span><span
  style='color:black'>, </span><span class=keyword>bool</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>odd () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool operator</span><span style='color:black'> () (</span><span
  class=keyword>int</span><span style='color:black'> n_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> (n_ % <span
  class=number>2</span>) == <span class=number>1</span>; }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> positive : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>int</span><span
  style='color:black'>, </span><span class=keyword>bool</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>positive () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool operator</span><span style='color:black'> () (</span><span
  class=keyword>int</span><span style='color:black'> n_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> n_ &gt;= <span
  class=number>0</span>; }<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>};<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>6</span>] = { -<span
  class=number>2</span>, -<span class=number>1</span>, <span class=number>0</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{ <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>binary_compose&lt;logical_and&lt;</span><span
  class=keyword>bool</span><span style='color:black'>&gt;, odd, positive&gt; <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>b (logical_and&lt;</span><span
  class=keyword>bool</span><span style='color:black'>&gt; (), odd (), positive ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = find_if (array, array + <span
  class=number>6</span>, b);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p != array + <span
  class=number>6</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *p &lt;&lt; </span><span
  class=string>&quot; is odd and positive&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setsymd2.cpp<a name=E02M0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02M0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* word1 = </span><span class=string>&quot;ABCDEFGHIJKLMNO&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'>* word2 = </span><span
  class=string>&quot;LMNOPQRSTUVWXYZ&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;word1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word1, word1 + ::strlen (word1), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nword2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word2, word2 + ::strlen (word2), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_symmetric_difference (word1, word1 + ::strlen (word1),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                            </span>word2, word2 + ::strlen (word2),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                            </span>iter,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                            </span>less&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>search0.cpp<a name=E0ZM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v1[<span class=number>6</span>] = { <span class=number>1</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>5</span>, <span class=number>8</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v2[<span class=number>6</span>] = { <span class=number>0</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v3[<span class=number>2</span>] = { <span class=number>3</span>, <span
  class=number>4</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* location;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = search (v1, v1 + <span
  class=number>6</span>, v3, v3 + <span class=number>2</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location == v1 + <span
  class=number>6</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v3 not contained in v1&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Found v3 in v1 at offset: &quot;</span><span
  style='color:black'> &lt;&lt; location - v1 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = search (v2, v2 + <span
  class=number>6</span>, v3, v3 + <span class=number>2</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location == v2 + <span
  class=number>6</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v3 not contained in v2&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Found v3 in v2 at offset: &quot;</span><span
  style='color:black'> &lt;&lt; location - v2 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>eqlrnge1.cpp<a name=E0XM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; IntVec;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVec v (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i / <span
  class=number>3</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Within the collection:\n\t&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (v.begin (), v.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair &lt;IntVec::iterator, IntVec::iterator&gt; range;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>range = equal_range (v.begin (), v.end (), <span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot;\n2 can be inserted from before index &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (range.first - v.begin ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot; to before index &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (range.second - v.begin ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rotcopy1.cpp<a name=E0VM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>rotate_copy (v1.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                 </span>v1.begin () + i,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                 </span>v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                 </span>v2.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>eqlrnge2.cpp<a name=E0TM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'> chars[] = </span><span class=string>&quot;aabbccddggghhklllmqqqqssyyzz&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> count = </span><span
  class=keyword>sizeof</span><span style='color:black'> (chars) - <span
  class=number>1</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; iter (cout);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Within the collection:\n\t&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (chars, chars + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair &lt;</span><span
  class=keyword>char</span><span style='color:black'>*, </span><span
  class=keyword>char</span><span style='color:black'>*&gt; range;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>range = equal_range (chars, chars + count, <span
  class=character>'q'</span>, less&lt;</span><span class=keyword>char</span><span
  style='color:black'>&gt;());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot;\nq can be inserted from before index &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (range.first - chars)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot; to before index &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (range.second - chars)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>release1.cpp<a name=E0RM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>class</span><span
  style='color:black'> X<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>public</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>X (</span><span
  class=keyword>int</span><span style='color:black'> i_) : i (i_) {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>~X () { cout &lt;&lt; </span><span
  class=string>&quot;Delete X(&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;)&quot;</span><span style='color:black'> &lt;&lt; endl; }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int</span><span style='color:black'> i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>ostream&amp; </span><span
  class=keyword>operator</span><span style='color:black'> &lt;&lt; (ostream&amp; stream_, </span><span
  class=keyword>const</span><span style='color:black'> X&amp; x_)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> stream_ &lt;&lt; </span><span
  class=string>&quot;X(&quot;</span><span style='color:black'> &lt;&lt; x_.i &lt;&lt; </span><span
  class=string>&quot;)&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;X*&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (</span><span
  class=keyword>new</span><span style='color:black'> X (<span class=number>2</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (</span><span
  class=keyword>new</span><span style='color:black'> X (<span class=number>1</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (</span><span
  class=keyword>new</span><span style='color:black'> X (<span class=number>4</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;X*&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v.begin (); i != v.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *(*i) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>release (v.begin (), v.end ()); </span><span
  class=comment>// Delete heap-based objects.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>incl1.cpp<a name=E0PM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1(<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2(<span class=number>3</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (includes (v1.begin (), v1.end (), v2.begin (), v2.end ()))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 includes v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 does not include v2&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; v2.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v2[i] = i + <span
  class=number>3</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (includes (v1.begin (), v1.end (), v2.begin (), v2.end ()))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 includes v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 does not include v2&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setintr2.cpp<a name=E0NM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* word1 = </span><span class=string>&quot;ABCDEFGHIJKLMNO&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'>* word2 = </span><span
  class=string>&quot;LMNOPQRSTUVWXYZ&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;word1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word1, word1 + ::strlen (word1), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nword2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word2, word2 + ::strlen (word2), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_intersection (word1, word1 + ::strlen (word1),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                    </span>word2, word2 + ::strlen (word2),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                 </span><span style="mso-spacerun: yes">   </span>iter,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                    </span>less&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>inrprod1.cpp<a name=E0LM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i + <span
  class=number>1</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>v2[i] = v1.size () - i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Inner product (sum of products) of:\n\t&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\n\t&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result = inner_product (v1.begin (), v1.end (), v2.begin (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nis: &quot;</span><span style='color:black'> &lt;&lt; result &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>merge1.cpp<a name=E0JM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v2.begin (), v2.end (), <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; result (v1.size () + v2.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>merge (v1.begin (), v1.end (), v2.begin (), v2.end (), result.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (result.begin (), result.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bcompos2.cpp<a name=E0HM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HM0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> odd : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>int</span><span
  style='color:black'>, </span><span class=keyword>bool</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>odd () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool operator</span><span style='color:black'> () (</span><span
  class=keyword>int</span><span style='color:black'> n_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> (n_ % <span
  class=number>2</span>) == <span class=number>1</span>; }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> positive : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>int</span><span
  style='color:black'>, </span><span class=keyword>bool</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>positive () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool operator</span><span style='color:black'> () (</span><span
  class=keyword>int</span><span style='color:black'> n_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> n_ &gt;= <span
  class=number>0</span>; }<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>};<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>6</span>] = { -<span
  class=number>2</span>, -<span class=number>1</span> , <span class=number>0</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = find_if (array, array + <span
  class=number>6</span>, <o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>compose2 (logical_and&lt;</span><span
  class=keyword>bool</span><span style='color:black'>&gt; (), odd (), positive ()));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p != array + <span
  class=number>6</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *p &lt;&lt; </span><span
  class=string>&quot; is odd and positive&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>error3.cpp<a name=E0FM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=comment>// Compile this code without defining OS_USE_EXCEPTIONS.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>void</span><span
  style='color:black'> my_handler (</span><span class=keyword>int</span><span
  style='color:black'> code_, </span><span class=keyword>const char</span><span
  style='color:black'>* str_)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Caught &quot;</span><span style='color:black'> &lt;&lt; str_ &lt;&lt; </span><span
  class=string>&quot; [code &quot;</span><span style='color:black'> &lt;&lt; code_ &lt;&lt; </span><span
  class=string>&quot;]&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>os_handler_function_t old_h = os_set_error_handler (my_handler);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.pop_back (); </span><span
  class=comment>// Generates an empty object error.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;returned from pop_back()&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>os_set_error_handler (old_h);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.pop_back (); </span><span
  class=comment>// Generates an empty object error.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;successful termination&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>incl0.cpp<a name=E0DM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers1[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers2[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>8</span>, <span class=number>16</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers3[<span class=number>2</span>] = { <span
  class=number>4</span>, <span class=number>8</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (includes (numbers1, numbers1 + <span
  class=number>5</span>, numbers3, numbers3 + <span class=number>2</span>))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers1 includes numbers3&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers1 does not include numbers3&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (includes (numbers2, numbers2 + <span
  class=number>5</span>, numbers3, numbers3 + <span class=number>2</span>))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers2 includes numbers3&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers2 does not include numbers3&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setdiff2.cpp<a name=E0BM0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BM0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* word1 = </span><span class=string>&quot;ABCDEFGHIJKLMNO&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'>* word2 = </span><span
  class=string>&quot;LMNOPQRSTUVWXYZ&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;word1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word1, word1 + ::strlen (word1), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nword2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word2, word2 + ::strlen (word2), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_difference (word1, word1 + ::strlen (word1),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                  </span>word2, word2 + ::strlen (word2),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                  </span>iter,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                  </span>less&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setunon2.cpp<a name=E06L0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06L0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* word1 = </span><span class=string>&quot;ABCDEFGHIJKLMNO&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'>* word2 = </span><span
  class=string>&quot;LMNOPQRSTUVWXYZ&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;word1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word1, word1 + ::strlen (word1), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nword2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (word2, word2 + ::strlen (word2), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_union (word1, word1 + ::strlen (word1),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">            </span><span style="mso-spacerun: yes"> </span>word2, word2 + ::strlen (word2),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">             </span>iter,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">             </span>less&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>unique2.cpp<a name=E04L0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04L0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_equal (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) == <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* labels[] = { </span><span class=string>&quot;Q&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;Q&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;W&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;W&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;E&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;E&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;R&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;T&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;T&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;Y&quot;</span><span
  style='color:black'>,</span><span class=string>&quot;Y&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> count = </span><span
  class=keyword>sizeof</span><span style='color:black'> (labels) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (labels[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; iter (cout);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (labels, labels + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>unique (labels, labels + count, str_equal);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (labels, labels + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>parsrtc1.cpp<a name=E02L0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02L0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = rand () % <span
  class=number>10</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; result (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sort_copy (v1.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">        </span><span style="mso-spacerun: yes">             </span>result.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                     </span>result.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (result.begin (), result.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>equal1.cpp<a name=E0ZL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZL0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (equal (v1.begin (), v1.end (), v2.begin ()))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 is equal to v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 is not equal to v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), v2.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (equal (v1.begin (), v1.end (), v2.begin ()))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 is equal to v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 is not equal to v2&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>equal0.cpp<a name=E0XL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XL0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers1[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers2[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>8</span>, <span class=number>16</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers3[<span class=number>2</span>] = { <span
  class=number>1</span>, <span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (equal (numbers1, numbers1 + <span
  class=number>5</span>, numbers2))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers1 is equal to numbers2&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers1 is not equal to numbers2&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (equal (numbers3, numbers3 + <span
  class=number>2</span>, numbers1))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers3 is equal to numbers1&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;numbers3 is not equal to numbers1&quot;</span><span
  style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>genern2.cpp<a name=E0VL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VL0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>class</span><span
  style='color:black'> Fibonacci<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>public</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>Fibonacci () : v1 (<span
  class=number>0</span>), v2 (<span class=number>1</span>) {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int operator</span><span style='color:black'> () ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>private</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int</span><span style='color:black'> v1;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int</span><span style='color:black'> v2;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>Fibonacci::</span><span class=keyword>operator</span><span
  style='color:black'> () ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> r = v1 + v2;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1 = v2;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v2 = r;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> v1;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>Fibonacci generator;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>generate_n (v1.begin (), v1.size (), generator);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>gener2.cpp<a name=E0TL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TL0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>class</span><span
  style='color:black'> Fibonacci<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>public</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>Fibonacci () : v1 (<span
  class=number>0</span>), v2 (<span class=number>1</span>) {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int operator</span><span style='color:black'> () ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>private</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int</span><span style='color:black'> v1;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int</span><span style='color:black'> v2;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>Fibonacci::</span><span class=keyword>operator</span><span
  style='color:black'> () ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> r = v1 + v2;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1 = v2;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v2 = r;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> v1;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>Fibonacci generator;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>generate (v1.begin (), v1.end (), generator);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>repcpif1.cpp<a name=E0RL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RL0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> odd (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ % <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>}<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i % <span
  class=number>5</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>replace_copy_if (v1.begin (), v1.end (), v2.begin (), odd, <span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setsymd.cpp<a name=E0PL0BA></a></h3>

<h3>deque1.cpp<a name=E0NL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NL0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; d;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>d.push_back (<span
  class=number>4</span>); </span><span class=comment>// Add after end.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>d.push_back (<span
  class=number>9</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>d.push_back (<span
  class=number>16</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>d.push_front (<span
  class=number>1</span>); </span><span class=comment>// Insert at beginning.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; d.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;d[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; d[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>d.pop_front (); </span><span
  class=comment>// Erase first element.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>d[<span
  class=number>2</span>] = <span class=number>25</span>; </span><span
  class=comment>// Replace last element.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; d.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;d[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; d[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>findif1.cpp<a name=E0LL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LL0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> div_3 (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ % <span
  class=number>3</span> ? <span class=number>0</span> : <span class=number>1</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; IntVec;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVec v (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = (i + <span
  class=number>1</span>) * (i + <span class=number>1</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVec::iterator iter;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>iter = find_if (v.begin (), v.end (), div_3);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (iter != v.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span><span style="mso-spacerun: yes"> </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot;Value &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; *iter<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot; at offset &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; (iter - v.begin ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot; is divisible by 3&quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ucompos1.cpp<a name=E0JL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JL0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;math.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> square_root : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>double</span><span
  style='color:black'>, </span><span class=keyword>double</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>square_root () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>double operator</span><span style='color:black'> () (</span><span
  class=keyword>double</span><span style='color:black'> x_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> sqrt (x_); }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input [<span class=number>3</span>] = { -<span
  class=number>1</span>, -<span class=number>4</span>, -<span class=number>16</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{ <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>3</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input, input + <span
  class=number>3</span>, output, <o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>unary_compose&lt;square_root, negate&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; (square_root (), negate&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ()));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rawiter.cpp<a name=E0HL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HL0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>class</span><span
  style='color:black'> X<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>public</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>X (</span><span
  class=keyword>int</span><span style='color:black'> i_ = <span class=number>0</span>) : i (i_) {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>operator int</span><span style='color:black'> () </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> i; }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>private</span><span style='color:black'>:<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span></span><span
  class=keyword>int</span><span style='color:black'> i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>os_heap_allocator&lt;X&gt; a;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Allocate (but do not construct) storage for 5 elements.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>os_heap_allocator&lt;X&gt;::pointer p = a.allocate (<span
  class=number>5</span>); <o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>raw_storage_iterator&lt;X*, X&gt; r (p);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <span style="mso-spacerun: yes"> </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>5</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>*r++ = X (i);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; <span
  class=number>5</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *p++ &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>set2.cpp<a name=E0FL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FL0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; s;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair&lt;set&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt;::const_iterator, </span><span
  class=keyword>bool</span><span style='color:black'>&gt; p;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>p = s.insert (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p.second)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span>cout &lt;&lt; </span><span
  class=string>&quot;Inserted new element &quot;</span><span style='color:black'> &lt;&lt; *(p.first) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span>cout &lt;&lt; </span><span
  class=string>&quot;Existing element = &quot;</span><span style='color:black'> &lt;&lt; *(p.first) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>p = s.insert (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p.second)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span>cout &lt;&lt; </span><span
  class=string>&quot;Inserted new element &quot;</span><span style='color:black'> &lt;&lt; *(p.first) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span>cout &lt;&lt; </span><span
  class=string>&quot;Existing element = &quot;</span><span style='color:black'> &lt;&lt; *(p.first) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mset3.cpp<a name=E0DL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DL0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>3</span>, <span
  class=number>6</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>2</span>, <span class=number>6</span>, <span
  class=number>7</span>, <span class=number>9</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>multiset&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; s (array, array + <span
  class=number>9</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>multiset&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Return location of first element that is not less than 3</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i = s.lower_bound (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;lower bound = &quot;</span><span style='color:black'> &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Return location of first element that is greater than 3</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i = s.upper_bound (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;upper bound = &quot;</span><span style='color:black'> &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>binsrch2.cpp<a name=E0BL0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BL0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_compare (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* labels[] = { </span><span class=string>&quot;aa&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;dd&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;ff&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;jj&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;ss&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;zz&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> count = </span><span
  class=keyword>sizeof</span><span style='color:black'> (labels) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (labels[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (binary_search (labels, labels + count, </span><span
  class=string>&quot;ff&quot;</span><span style='color:black'>, str_compare))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;ff is in labels.&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;ff is not in labels.&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>nthelem2.cpp<a name=E06K0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06K0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = rand () % <span
  class=number>10</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>nth_element (v1.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">               </span>v1.begin () + v1.size () / <span
  class=number>2</span>,<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">               </span>v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">               </span>greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setintr1.cpp<a name=E04K0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04K0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v2.begin(), v2.end (), <span
  class=number>7</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nv2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_intersection (v1.begin (), v1.end (), v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setdiff1.cpp<a name=E02K0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02K0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v2.begin(), v2.end (), <span
  class=number>7</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nv2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_difference (v1.begin (), v1.end (), v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>adjdiff2.cpp<a name=E0ZK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> mult (</span><span class=keyword>int</span><span
  style='color:black'> a_, </span><span class=keyword>int</span><span
  style='color:black'> b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ * b_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i + <span
  class=number>1</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; rslt (v.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>adjacent_difference (v.begin (), v.end (), rslt.begin (), mult);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v.begin (), v.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (rslt.begin (), rslt.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rotate1.cpp<a name=E0XK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>rotate (v1.begin (), v1.begin () + i, v1.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setunon1.cpp<a name=E0VK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v2.begin(), v2.end (), <span
  class=number>7</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nv2: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_union (v1.begin (), v1.end (), v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>insert1.cpp<a name=E0TK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TK0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* array1 [] = { </span><span class=string>&quot;laurie&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;jennifer&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;leisa&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'>* array2 [] = { </span><span
  class=string>&quot;amanda&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;saskia&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;carrie&quot;</span><span style='color:black'> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; names (array1, array1 + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator i = names.begin () + <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (array2, array2 + <span
  class=number>3</span>, insert_iterator&lt;deque &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; &gt; (names, i));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator j;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (j = names.begin (); j != names.end (); j++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *j &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ucompos2.cpp<a name=E0RK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RK0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;math.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> square_root : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>double</span><span
  style='color:black'>, </span><span class=keyword>double</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>square_root () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>double operator</span><span style='color:black'> () (</span><span
  class=keyword>double</span><span style='color:black'> x_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> sqrt (x_); }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input [<span class=number>3</span>] = { -<span
  class=number>1</span>, -<span class=number>4</span>, -<span class=number>16</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{ <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>3</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input, input + <span
  class=number>3</span>, output, <o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>compose1 (square_root (), negate&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ()));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">   </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>parsrt1.cpp<a name=E0PK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = rand () % <span
  class=number>10</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sort (v1.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                </span>v1.begin () + v1.size () / <span
  class=number>2</span>,<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">                </span>v1.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>equal2.cpp<a name=E0NK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> values_squared (</span><span class=keyword>int</span><span
  style='color:black'> a_, </span><span class=keyword>int</span><span
  style='color:black'> b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> (a_ * a_ == b_);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v2[i] = i * i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (equal (v1.begin (), v1.end (), v2.begin (), values_squared))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v2[i] == v1[i] * v1[i]&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v2[i] != v1[i] * v1[i]&quot;</span><span style='color:
  black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>inplmrg2.cpp<a name=E0LK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1(<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = (v1.size () - i - <span
  class=number>1</span>) % <span class=number>5</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>inplace_merge (v1.begin (), v1.begin () + <span
  class=number>5</span>,<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">                 </span>v1.end (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                 </span>greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>nthelem1.cpp<a name=E0JK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = rand () % <span
  class=number>10</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>nth_element (v1.begin (),<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">               </span>v1.begin () + v1.size () / <span
  class=number>2</span>,<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">               </span>v1.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec4.cpp<a name=E0HK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HK0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>4</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v[<span
  class=number>0</span>] = <span class=number>1</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v[<span
  class=number>1</span>] = <span class=number>4</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v[<span
  class=number>2</span>] = <span class=number>9</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v[<span
  class=number>3</span>] = <span class=number>16</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;front = &quot;</span><span style='color:black'> &lt;&lt; v.front () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;back = &quot;</span><span style='color:black'> &lt;&lt; v.back () &lt;&lt; </span><span
  class=string>&quot;, size = &quot;</span><span style='color:black'> &lt;&lt; v.size () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>25</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;back = &quot;</span><span style='color:black'> &lt;&lt; v.back () &lt;&lt; </span><span
  class=string>&quot;, size = &quot;</span><span style='color:black'> &lt;&lt; v.size () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.pop_back ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;back = &quot;</span><span style='color:black'> &lt;&lt; v.back () &lt;&lt; </span><span
  class=string>&quot;, size = &quot;</span><span style='color:black'> &lt;&lt; v.size () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>lwrbnd2.cpp<a name=E0FK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> char_str_less (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* str [] = { </span><span class=string>&quot;a&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;a&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;b&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;b&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;q&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;w&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;z&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> strCt = </span><span
  class=keyword>sizeof</span><span style='color:black'> (str)/</span><span
  class=keyword>sizeof</span><span style='color:black'> (str[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot;d can be inserted at index: &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (lower_bound (str,<span style="mso-spacerun: yes">  </span>str + strCt, </span><span
  class=string>&quot;d&quot;</span><span style='color:black'>, char_str_less) - str)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>pheap2.cpp<a name=E0DK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DK0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>20</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>make_heap (v.begin (), v.end (), greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>7</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>push_heap (v.begin (), v.end (), greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort_heap (v.begin (), v.end (), greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v.begin (), v.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>insert2.cpp<a name=E0BK0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BK0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* array1 [] = { </span><span class=string>&quot;laurie&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;jennifer&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;leisa&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'>* array2 [] = { </span><span
  class=string>&quot;amanda&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;saskia&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;carrie&quot;</span><span style='color:black'> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; names (array1, array1 + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator i = names.begin () + <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (array2, array2 + <span
  class=number>3</span>, inserter (names, i));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator j;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (j = names.begin (); j != names.end (); j++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *j &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>uprbnd2.cpp<a name=E06J0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06J0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> char_str_less (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* str [] = { </span><span class=string>&quot;a&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;a&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;b&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;b&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;q&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;w&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;z&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> strCt = </span><span
  class=keyword>sizeof</span><span style='color:black'> (str)/</span><span
  class=keyword>sizeof</span><span style='color:black'> (str[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot;d can be inserted at index: &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; upper_bound (str,<span style="mso-spacerun: yes">  </span>str + strCt, </span><span
  class=string>&quot;d&quot;</span><span style='color:black'>, char_str_less) - str<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec3.cpp<a name=E04J0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04J0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; v1; </span><span
  class=comment>// Empty vector of characters.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1.push_back (<span
  class=character>'h'</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1.push_back (<span
  class=character>'i'</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1 = &quot;</span><span style='color:black'> &lt;&lt; v1[<span
  class=number>0</span>] &lt;&lt; v1[<span class=number>1</span>] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; v2 (v1);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v2[<span
  class=number>1</span>] = <span class=character>'o'</span>; </span><span
  class=comment>// Replace second character.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v2 = &quot;</span><span style='color:black'> &lt;&lt; v2[<span
  class=number>0</span>] &lt;&lt; v2[<span class=number>1</span>] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;(v1 == v2) = &quot;</span><span style='color:black'> &lt;&lt; (v1 == v2) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;(v1 &lt; v2) = &quot;</span><span style='color:black'> &lt;&lt; (v1 &lt; v2) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>iter4.cpp<a name=E02J0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02J0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v; </span><span
  class=comment>// Empty vector of integers.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Position immediately after last item.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i = v.end (); <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=comment>// Move back one and then access.</span><span style='color:
  black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;last element is &quot;</span><span style='color:black'> &lt;&lt; *--i &lt;&lt; endl; <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>i -= <span
  class=number>2</span>; </span><span class=comment>// Jump back two items.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;first element is &quot;</span><span style='color:black'> &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setdiff0.cpp<a name=E0ZJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v1[<span class=number>3</span>] = { <span class=number>13</span>, <span
  class=number>18</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v2[<span class=number>4</span>] = { <span class=number>10</span>, <span
  class=number>13</span>, <span class=number>17</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>4</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_difference (v1, v1 + <span
  class=number>3</span>, v2, v2 + <span class=number>4</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_difference (v2, v2 + <span
  class=number>4</span>, v1, v1 + <span class=number>2</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>lexcmp2.cpp<a name=E0XJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>const unsigned</span><span
  style='color:black'> size = <span class=number>6</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'> n1[size] = </span><span class=string>&quot;shoe&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'> n2[size] = </span><span
  class=string>&quot;shine&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool</span><span style='color:black'> before =<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>lexicographical_compare (n1, n1 + size,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                             </span>n2, n2 + size,<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">                             </span>greater&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (before)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; n1 &lt;&lt; </span><span
  class=string>&quot; is after &quot;</span><span style='color:black'> &lt;&lt; n2 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; n2 &lt;&lt; </span><span
  class=string>&quot; is after &quot;</span><span style='color:black'> &lt;&lt; n1 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>adjdiff1.cpp<a name=E0VJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i * i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; result (v.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>adjacent_difference (v.begin (), v.end (), result.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v.begin (), v.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (result.begin (), result.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>stblptn1.cpp<a name=E0TJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = rand () % <span
  class=number>20</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>stable_partition (v1.begin (), v1.end (), bind2nd(less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;(), <span class=number>11</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ptition1.cpp<a name=E0RJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = rand () % <span
  class=number>20</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partition (v1.begin (), v1.end (), bind2nd(less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;(), <span class=number>11</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec1.cpp<a name=E0PJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PJ0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1; </span><span
  class=comment>// Empty vector of integers.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;empty = &quot;</span><span style='color:black'> &lt;&lt; v1.empty () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;size = &quot;</span><span style='color:black'> &lt;&lt; v1.size () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;max_size = &quot;</span><span style='color:black'> &lt;&lt; v1.max_size () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v1.push_back (<span
  class=number>42</span>); </span><span class=comment>// Add an integer to the vector.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;size = &quot;</span><span style='color:black'> &lt;&lt; v1.size () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;v1[0] = &quot;</span><span style='color:black'> &lt;&lt; v1[<span
  class=number>0</span>] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>sort2.cpp<a name=E0NJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array[] = { <span class=number>1</span>, <span
  class=number>50</span>, -<span class=number>10</span>, <span class=number>11</span>, <span
  class=number>42</span>, <span class=number>19</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> count = </span><span
  class=keyword>sizeof</span><span style='color:black'> (array) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (array[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;before: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (array, array + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;\nafter: &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (array, array + count, greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (array, array + count, iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>copy4.cpp<a name=E0LJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; IVec;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> loc = <span class=number>0</span>; loc &lt; v1.size (); loc++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[loc] = loc;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>insert_iterator&lt;IVec&gt; i (v2, v2.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), i);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; outIter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), outIter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>prevprm2.cpp<a name=E0JJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>9</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>prev_permutation (v1.begin (), v1.end (), greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>trnsfrm2.cpp<a name=E0HJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'> map_char (</span><span class=keyword>char</span><span
  style='color:black'> a_, </span><span class=keyword>int</span><span
  style='color:black'> b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return char</span><span style='color:black'>(a_ + b_);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> trans[] = {-<span class=number>4</span>, <span
  class=number>4</span>, -<span class=number>6</span>, -<span class=number>6</span>, -<span
  class=number>10</span>, <span class=number>0</span>, <span class=number>10</span>, -<span
  class=number>6</span>, <span class=number>6</span>, <span class=number>0</span>, -<span
  class=number>1</span>, -<span class=number>77</span>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'> n[] = </span><span class=string>&quot;Larry Mullen&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> count = ::strlen (n);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; iter (cout);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>transform (n, n + count, trans, iter, map_char);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>iter1.cpp<a name=E0FJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FJ0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>const char</span><span style='color:black'>*&gt; v; </span><span
  class=comment>// Vector of character strings.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;zippy&quot;</span><span style='color:black'>); </span><span
  class=comment>// First element.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;motorboy&quot;</span><span style='color:black'>); </span><span
  class=comment>// Second element.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>const char</span><span style='color:black'>*&gt;::iterator i = v.begin (); </span><span
  class=comment>// Position at end.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v.begin (); i != v.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl; </span><span
  class=comment>// Display item.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>nextprm2.cpp<a name=E0DJ0BA></a></h3>

<h3>maxelem2.cpp<a name=E0BJ0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BJ0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_compare (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* names[] = { </span><span class=string>&quot;Brett&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Graham&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Jack&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Mike&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Todd&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> namesCt = </span><span
  class=keyword>sizeof</span><span style='color:black'> (names)/</span><span
  class=keyword>sizeof</span><span style='color:black'> (names[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; *max_element (names, names + namesCt, str_compare) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>minelem2.cpp<a name=E06I0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06I0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_compare (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* names[] = { </span><span class=string>&quot;Brett&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Graham&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Jack&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Mike&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;Todd&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> namesCt = </span><span
  class=keyword>sizeof</span><span style='color:black'> (names)/</span><span
  class=keyword>sizeof</span><span style='color:black'> (names[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; *min_element (names, names + namesCt, str_compare) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>partsum2.cpp<a name=E04I0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04I0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sum (v1.begin (), v1.end (), v2.begin (), times&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>istmit1.cpp<a name=E02I0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02I0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'> buffer [<span
  class=number>100</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cin.unsetf (ios::skipws); </span><span
  class=comment>// Disable white-space skipping.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Please enter a string: &quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>istream_iterator&lt;</span><span
  class=keyword>char</span><span style='color:black'>, ptrdiff_t&gt; s (cin);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (*s != <span
  class=character>'\n'</span>)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>buffer[i++] = *s++;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>buffer[i] = <span
  class=character>'\0'</span>; </span><span class=comment>// Null terminate buffer.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;read &quot;</span><span style='color:black'> &lt;&lt; buffer &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>findif0.cpp<a name=E0ZI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> odd (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ % <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>}<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>2</span>, <span class=number>4</span>, <span class=number>8</span>, <span
  class=number>15</span>, <span class=number>32</span>, <span class=number>64</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* location = find_if (numbers, numbers + <span
  class=number>6</span>, odd);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (location != numbers + <span
  class=number>6</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot;Value &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; *location<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot; at offset &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; (location - numbers)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; </span><span
  class=string>&quot; is odd&quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">      </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>pheap1.cpp<a name=E0XI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>20</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>make_heap (v.begin (), v.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>7</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>push_heap (v.begin (), v.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort_heap (v.begin (), v.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v.begin (), v.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>stblsrt2.cpp<a name=E0VI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> string_less(</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* letters[<span class=number>6</span>] = {</span><span
  class=string>&quot;bb&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;aa&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;ll&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;dd&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;qq&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;cc&quot;</span><span style='color:black'> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>stable_sort (letters, letters + <span
  class=number>6</span>, string_less);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; letters[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>nextprm1.cpp<a name=E0TI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>9</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>next_permutation (v1.begin (), v1.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>prevprm1.cpp<a name=E0RI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>9</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>prev_permutation (v1.begin (), v1.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rndshuf1.cpp<a name=E0PI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1(<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>random_shuffle (v1.begin (), v1.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ptrbinf1.cpp<a name=E0NI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NI0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> sum (</span><span class=keyword>int</span><span
  style='color:black'> x_, </span><span class=keyword>int</span><span
  style='color:black'> y_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> x_ + y_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>7</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>5</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>1</span>, <span class=number>5</span>, <span
  class=number>5</span>, <span class=number>8</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">   </span><span style="mso-spacerun: yes"> </span>pointer_to_binary_function&lt;</span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>&gt; (sum));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>iter2.cpp<a name=E0LI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LI0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>void</span><span
  style='color:black'> print (</span><span class=keyword>const</span><span
  style='color:black'> vector&lt;</span><span class=keyword>const char</span><span
  style='color:black'>*&gt;&amp; v_)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>const char</span><span style='color:black'>*&gt;::const_iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v_.begin (); i != v_.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>const char</span><span style='color:black'>*&gt; v; </span><span
  class=comment>// Vector of character strings.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;zippy&quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;motorboy&quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>print (v);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>partsum1.cpp<a name=E0JI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (v1.size());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sum (v1.begin (), v1.end (), v2.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>replif1.cpp<a name=E0HI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HI0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> odd (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ % <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>}<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i % <span
  class=number>5</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v1[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>replace_if (v1.begin (), v1.end (), odd, <span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v1[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mset4.cpp<a name=E0FI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FI0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>3</span>, <span
  class=number>6</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>2</span>, <span class=number>6</span>, <span
  class=number>7</span>, <span class=number>9</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> multiset&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; mset;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mset s (array, array + <span
  class=number>9</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>pair&lt;mset::const_iterator, mset::const_iterator&gt; p = s.equal_range (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;lower bound = &quot;</span><span style='color:black'> &lt;&lt; *(p.first) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;upper bound = &quot;</span><span style='color:black'> &lt;&lt; *(p.second) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>iter3.cpp<a name=E0DI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DI0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>const char</span><span style='color:black'>*&gt; v; </span><span
  class=comment>// Vector of character strings.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;zippy&quot;</span><span style='color:black'>); </span><span
  class=comment>// First element.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;motorboy&quot;</span><span style='color:black'>); </span><span
  class=comment>// Second element.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>const char</span><span style='color:black'>*&gt;::reverse_iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v.rbegin (); i != v.rend (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl; </span><span
  class=comment>// Display item.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>list2.cpp<a name=E0BI0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BI0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array1 [] = { <span class=number>1</span>, <span
  class=number>16</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> array2 [] = { <span
  class=number>4</span>, <span class=number>9</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; l1 (array1, array1 + <span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; l2 (array2, array2 + <span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i = l1.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>i++;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>l1.splice (i, l2, l2.begin (), l2.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>i = l1.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (i != l1.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i++ &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>set1.cpp<a name=E06H0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06H0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set&lt;</span><span
  class=keyword>int</span><span style='color:black'>, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; s;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count (42) = &quot;</span><span style='color:black'> &lt;&lt; s.count (<span
  class=number>42</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.insert (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count (42) = &quot;</span><span style='color:black'> &lt;&lt; s.count (<span
  class=number>42</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.insert (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count (42) = &quot;</span><span style='color:black'> &lt;&lt; s.count (<span
  class=number>42</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> count = s.erase (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; count &lt;&lt; </span><span
  class=string>&quot; elements erased&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>list1.cpp<a name=E04H0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04H0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array1 [] = { <span class=number>9</span>, <span
  class=number>16</span>, <span class=number>36</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array2 [] = { <span class=number>1</span>, <span
  class=number>4</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; l1 (array1, array1 + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; l2 (array2, array2 + <span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i1 = l1.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>l1.splice (i1, l2);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i2 = l1.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (i2 != l1.end ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i2++ &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>alg5.cpp<a name=E02H0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02H0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; years;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>1962</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>1992</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>2001</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>1999</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (years.begin (), years.end ()); </span><span
  class=comment>// Causes linker error.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = years.begin (); i != years.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>eqlrnge0.cpp<a name=E0ZH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>10</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>1</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>2</span>, <span
  class=number>2</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>3</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair &lt;</span><span
  class=keyword>int</span><span style='color:black'>*, </span><span
  class=keyword>int</span><span style='color:black'>*&gt; range;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>range = equal_range (numbers, numbers + <span
  class=number>10</span>, <span class=number>2</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot;2 can be inserted from before index &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (range.first - numbers)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot; to before index &quot;</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (range.second - numbers)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>advance.cpp<a name=E0XH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; IntVector;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVector v (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>IntVector::iterator location = v.begin ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;At Beginning: &quot;</span><span style='color:black'> &lt;&lt; *location &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>advance (location, <span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;At Beginning + 5: &quot;</span><span style='color:black'> &lt;&lt; *location &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>replace1.cpp<a name=E0VH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <span style="mso-spacerun: yes"> </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i % <span
  class=number>5</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>replace (v1.begin (), v1.end (), <span
  class=number>2</span>, <span class=number>42</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>alg3.cpp<a name=E0TH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TH0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>i.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i.push_back (<span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i.push_back (<span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i.push_back (<span
  class=number>8</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i.push_back (<span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>i.push_back (<span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> n = <span class=number>0</span>; </span><span
  class=comment>// Must be initialized, as count increments n.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>count (i.begin (), i.end (), <span
  class=number>2</span>, n);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Count of 2s = &quot;</span><span style='color:black'> &lt;&lt; n &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>func2.cpp<a name=E0RH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RH0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> bigger_than (</span><span class=keyword>int</span><span
  style='color:black'> x_, </span><span class=keyword>int</span><span
  style='color:black'> y_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> x_ &gt; y_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>sort (v.begin (), v.end (), bigger_than);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v.begin (); i != v.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>unegate1.cpp<a name=E0PH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PH0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> odd : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>int</span><span
  style='color:black'>, </span><span class=keyword>bool</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>odd () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool operator</span><span style='color:black'> () (</span><span
  class=keyword>int</span><span style='color:black'> n_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> (n_ % <span
  class=number>2</span>) == <span class=number>1</span>; }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = find_if (array, array + <span
  class=number>3</span>, unary_negate&lt;odd&gt; (odd ()));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p != array + <span
  class=number>3</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *p &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>alg4.cpp<a name=E0NH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NH0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; years;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>1962</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>1992</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>2001</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>years.push_back (<span
  class=number>1999</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (years.begin (), years.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = years.begin (); i != years.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>countif1.cpp<a name=E0LH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> odd (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'> <span style="mso-spacerun: yes"> </span></span><span
  class=keyword>return</span><span style='color:black'> a_ % <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>}<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; numbers(<span
  class=number>100</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>100</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>numbers[i] = i % <span
  class=number>3</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> elements = <span
  class=number>0</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>count_if (numbers.begin (), numbers.end (), odd, elements);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Found &quot;</span><span style='color:black'> &lt;&lt; elements &lt;&lt; </span><span
  class=string>&quot; odd elements.&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>lwrbnd1.cpp<a name=E0JH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>20</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i/<span
  class=number>4</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v1[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* location =<span style="mso-spacerun: yes">  </span>lower_bound (v1.begin (), v1.end (), <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot;\n3 can be inserted at index: &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; (location - v1.begin ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>lexcmp1.cpp<a name=E0HH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>const unsigned</span><span
  style='color:black'> size = <span class=number>6</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'> n1[size] = </span><span class=string>&quot;shoe&quot;</span><span
  style='color:black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>char</span><span style='color:black'> n2[size] = </span><span
  class=string>&quot;shine&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool</span><span style='color:black'> before = lexicographical_compare (n1, n1 + size, n2, n2 + size);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (before)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; n1 &lt;&lt; </span><span
  class=string>&quot; is before &quot;</span><span style='color:black'> &lt;&lt; n2 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; n2 &lt;&lt; </span><span
  class=string>&quot; is before &quot;</span><span style='color:black'> &lt;&lt; n1 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>copyb.cpp<a name=E0FH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2(v1.size ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy_backward (v1.begin (), v1.end (), v2.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ptrbinf2.cpp<a name=E0DH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DH0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> sum (</span><span class=keyword>int</span><span
  style='color:black'> x_, </span><span class=keyword>int</span><span
  style='color:black'> y_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> x_ + y_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>7</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>5</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>1</span>, <span class=number>5</span>, <span
  class=number>5</span>, <span class=number>8</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, ptr_fun (sum));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>copyb0.cpp<a name=E0BH0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BH0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result[<span class=number>5</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy_backward (numbers, numbers + <span
  class=number>5</span>, result + <span class=number>5</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>5</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; <span
  class=number>5</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>binsert1.cpp<a name=E06G0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06G0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* array [] = { </span><span class=string>&quot;laurie&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;jennifer&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;leisa&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; names;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (array, array + <span
  class=number>3</span>, back_insert_iterator&lt;vector &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; &gt; (names));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = names.begin (); i != names.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>unegate2.cpp<a name=E04G0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04G0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>struct</span><span
  style='color:black'> odd : </span><span class=keyword>public</span><span
  style='color:black'> unary_function&lt;</span><span class=keyword>int</span><span
  style='color:black'>, </span><span class=keyword>bool</span><span
  style='color:black'>&gt;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>odd () {}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>bool operator</span><span style='color:black'> () (</span><span
  class=keyword>int</span><span style='color:black'> n_) </span><span
  class=keyword>const</span><span style='color:black'> { </span><span
  class=keyword>return</span><span style='color:black'> (n_ % <span
  class=number>2</span>) == <span class=number>1</span>; }<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>};<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = find_if (array, array + <span
  class=number>3</span>, not1 (odd ()));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p != array + <span
  class=number>3</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *p &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>revcopy1.cpp<a name=E02G0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02G0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result[<span class=number>6</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>reverse_copy (numbers, numbers + <span
  class=number>6</span>, result);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>finsert1.cpp<a name=E0ZG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZG0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* array [] = { </span><span class=string>&quot;laurie&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;jennifer&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;leisa&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; names;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (array, array + <span
  class=number>3</span>, front_insert_iterator&lt;deque &lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; &gt; (names));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = names.begin (); i != names.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>remcpif1.cpp<a name=E0XG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XG0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> odd (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ % <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>}<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>remove_copy_if (numbers, numbers + <span
  class=number>6</span>, result, odd);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>inplmrg1.cpp<a name=E0VG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VG0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>1</span>, <span class=number>10</span>, <span class=number>42</span>, <span
  class=number>3</span>, <span class=number>16</span>, <span class=number>32</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>inplace_merge (numbers, numbers + <span
  class=number>3</span>, numbers + <span class=number>6</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>list4.cpp<a name=E0TG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TG0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array1 [] = { <span class=number>1</span>, <span
  class=number>3</span>, <span class=number>6</span>, <span class=number>7</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array2 [] = { <span class=number>2</span>, <span
  class=number>4</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; l1 (array1, array1 + <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; l2 (array2, array2 + <span
  class=number>2</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>l1.merge (l2);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i = l1.begin (); i != l1.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>revbit1.cpp<a name=E0RG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RG0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>1</span>, <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (array, array + <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>reverse_bidirectional_iterator&lt;list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator, </span><span
  class=keyword>int</span><span style='color:black'>, <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes"> </span><span style="mso-spacerun: yes">   </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::reference, list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::difference_type&gt; r (v.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (r != v.begin ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *r++ &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>copy3.cpp<a name=E0PG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PG0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v2 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), v2.begin ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v2.begin (), v2.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>merge0.cpp<a name=E0NG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NG0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers1[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>6</span>, <span class=number>13</span>, <span
  class=number>25</span>, <span class=number>101</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers2[<span class=number>5</span>] = {-<span
  class=number>5</span>, <span class=number>26</span>, <span class=number>36</span>, <span
  class=number>46</span>, <span class=number>99</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result[<span class=number>10</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>merge (numbers1, numbers1 + <span
  class=number>5</span>, numbers2, numbers2 + <span class=number>5</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>10</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'> <span style="mso-spacerun: yes"> </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>reviter1.cpp<a name=E0LG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LG0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>1</span>, <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (array, array + <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>stl_reverse_iterator&lt;vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator, </span><span
  class=keyword>int</span><span style='color:black'>, <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::reference, vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::difference_type&gt; r (v.end ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (r != v.begin ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *r++ &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>find1.cpp<a name=E0JG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JG0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> years[] = { <span class=number>1942</span>, <span
  class=number>1952</span>, <span class=number>1962</span>, <span class=number>1972</span>, <span
  class=number>1982</span>, <span class=number>1992</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>const unsigned</span><span style='color:black'> yearCount = </span><span
  class=keyword>sizeof</span><span style='color:black'> (years) / </span><span
  class=keyword>sizeof</span><span style='color:black'> (years[<span
  class=number>0</span>]);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* location = find (years, years + yearCount, <span
  class=number>1972</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Found 1972 at offset &quot;</span><span style='color:black'> &lt;&lt; (location - years) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>trnsfrm1.cpp<a name=E0HG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HG0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> negate_int (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'> <span style="mso-spacerun: yes"> </span></span><span
  class=keyword>return</span><span style='color:black'> -a_;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { -<span
  class=number>5</span>, -<span class=number>1</span>, <span class=number>0</span>, <span
  class=number>1</span>, <span class=number>6</span>, <span class=number>11</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result[<span class=number>6</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>transform (numbers, numbers + <span
  class=number>6</span>, result, negate_int);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>binsert2.cpp<a name=E0FG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FG0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* array [] = { </span><span class=string>&quot;laurie&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;jennifer&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;leisa&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; names;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (array, array + <span
  class=number>3</span>, back_inserter (names));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = names.begin (); i != names.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setsymd0.cpp<a name=E0DG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DG0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v1[<span class=number>3</span>] = { <span class=number>13</span>, <span
  class=number>18</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v2[<span class=number>4</span>] = { <span class=number>10</span>, <span
  class=number>13</span>, <span class=number>17</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>4</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_symmetric_difference (v1, v1 + <span
  class=number>3</span>, v2, v2 + <span class=number>4</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>finsert2.cpp<a name=E0BG0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BG0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* array [] = { </span><span class=string>&quot;laurie&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;jennifer&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;leisa&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt; names;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (array, array + <span
  class=number>3</span>, front_inserter (names));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = names.begin (); i != names.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mset2.cpp<a name=E06F0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06F0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'>* names [] = { </span><span class=string>&quot;dave&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;alf&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;chas&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;bob&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;ed&quot;</span><span
  style='color:black'>, </span><span class=string>&quot;chas&quot;</span><span
  style='color:black'> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>typedef</span><span style='color:black'> multiset&lt;</span><span
  class=keyword>char</span><span style='color:black'>*, less_s&gt; mset;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>mset s;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.insert (names, names + <span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (mset::iterator i = s.begin (); i != s.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ostmit.cpp<a name=E04F0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04F0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>1</span>, <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>4</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'>* string = </span><span
  class=string>&quot;hello&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>char</span><span style='color:black'>&gt; it1 (cout);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (string, string + <span
  class=number>5</span>, it1);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; it2 (cout);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (array, array + <span
  class=number>4</span>, it2);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ptrunf1.cpp<a name=E02F0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02F0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> even (</span><span class=keyword>int</span><span
  style='color:black'> n_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> (n_ % <span
  class=number>2</span>) == <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = find_if (array, array + <span
  class=number>3</span>, <o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>pointer_to_unary_function&lt;</span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>bool</span><span style='color:black'>&gt; (even));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p != array + <span
  class=number>3</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *p &lt;&lt; </span><span
  class=string>&quot; is even&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>func1.cpp<a name=E0ZF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZF0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> bigger (</span><span class=keyword>int</span><span
  style='color:black'> i_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> i_ &gt; <span
  class=number>3</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>}<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> n = <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>count_if (v.begin (), v.end (), bigger, n);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Number greater than 3 = &quot;</span><span
  style='color:black'> &lt;&lt; n &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>stblptn0.cpp<a name=E0XF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XF0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> less_10 (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ &lt; <span
  class=number>10</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>10</span>, <span class=number>5</span>, <span class=number>11</span>, <span
  class=number>20</span>, <span class=number>6</span>, -<span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>stable_partition (numbers, numbers + <span
  class=number>6</span>, less_10);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setunon0.cpp<a name=E0VF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VF0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v1[<span class=number>3</span>] = { <span class=number>13</span>, <span
  class=number>18</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v2[<span class=number>4</span>] = { <span class=number>10</span>, <span
  class=number>13</span>, <span class=number>17</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>7</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_union (v1, v1 + <span
  class=number>3</span>, v2, v2 + <span class=number>4</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>7</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mkheap1.cpp<a name=E0TF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TF0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>5</span>, <span class=number>10</span>, <span class=number>4</span>, <span
  class=number>13</span>, <span class=number>11</span>, <span class=number>19</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>make_heap (numbers, numbers + <span
  class=number>6</span>, greater&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>6</span>; i &gt;= <span
  class=number>1</span>; i--)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[<span
  class=number>0</span>] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>pop_heap (numbers, numbers + i, greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>setintr0.cpp<a name=E0RF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RF0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v1[<span class=number>3</span>] = { <span class=number>13</span>, <span
  class=number>18</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v2[<span class=number>4</span>] = { <span class=number>10</span>, <span
  class=number>13</span>, <span class=number>17</span>, <span class=number>23</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>4</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>set_intersection (v1, v1 + <span
  class=number>3</span>, v2, v2 + <span class=number>4</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>logicand.cpp<a name=E0PF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PF0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>1</span>, <span class=number>1</span>, <span class=number>0</span>, <span
  class=number>1</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>bool</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>0</span>, <span class=number>1</span>, <span
  class=number>0</span>, <span class=number>0</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, logical_and&lt;</span><span
  class=keyword>bool</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>logicor.cpp<a name=E0NF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NF0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>1</span>, <span class=number>1</span>, <span class=number>0</span>, <span
  class=number>1</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>bool</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>0</span>, <span class=number>1</span>, <span
  class=number>0</span>, <span class=number>0</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, logical_or&lt;</span><span
  class=keyword>bool</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>nequal.cpp<a name=E0LF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LF0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>1</span>, <span class=number>7</span>, <span class=number>2</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>1</span>, <span class=number>6</span>, <span
  class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, not_equal_to&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ptition0.cpp<a name=E0JF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JF0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> less_10 (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ &lt; <span
  class=number>10</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>6</span>, <span class=number>12</span>, <span class=number>3</span>, <span
  class=number>10</span>, <span class=number>1</span>, <span class=number>20</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partition (numbers, numbers + <span
  class=number>6</span>, less_10);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>inrprod0.cpp<a name=E0HF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HF0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> vector1[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> vector2[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'> <span style="mso-spacerun: yes"> </span>result = inner_product (vector1, vector1 + <span
  class=number>5</span>, vector2, <span class=number>0</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Inner product = &quot;</span><span style='color:black'> &lt;&lt; result &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>func3.cpp<a name=E0FF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FF0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>1</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>5</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>sort (v.begin (), v.end (), greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::iterator i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = v.begin (); i != v.end (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>modulus.cpp<a name=E0DF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DF0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>6</span>, <span class=number>8</span>, <span class=number>10</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>4</span>, <span class=number>2</span>, <span
  class=number>11</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, modulus&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>uprbnd1.cpp<a name=E0BF0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BF0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> array[<span class=number>20</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>20</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>array[i] = i/<span
  class=number>4</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; </span><span
  class=string>&quot;\n3 can be inserted at index: &quot;</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; upper_bound (array, array + <span
  class=number>20</span>, <span class=number>3</span>) - array<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>&lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>equalto.cpp<a name=E06E0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06E0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>1</span>, <span class=number>7</span>, <span class=number>2</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>1</span>, <span class=number>6</span>, <span
  class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, equal_to&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>count1.cpp<a name=E04E0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04E0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; numbers(<span
  class=number>100</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>100</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>numbers[i] = i % <span
  class=number>3</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> elements = <span
  class=number>0</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>count (numbers.begin (), numbers.end (), <span
  class=number>2</span>, elements);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Found &quot;</span><span style='color:black'> &lt;&lt; elements &lt;&lt; </span><span
  class=string>&quot; 2's.&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>uniqcpy1.cpp<a name=E02E0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02E0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>8</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>1</span>, <span
  class=number>2</span>, <span class=number>2</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>4</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>8</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span>, <span class=number>0</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>unique_copy (numbers, numbers + <span
  class=number>8</span>, result);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>8</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>minus.cpp<a name=E0ZE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZE0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>1</span>, <span class=number>5</span>, <span class=number>7</span>, <span
  class=number>8</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>1</span>, <span class=number>4</span>, <span
  class=number>8</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output [<span
  class=number>4</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>transform (input1, input1 + <span
  class=number>4</span>, input2, output, minus&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>replcpy1.cpp<a name=E0XE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>replace_copy (numbers, numbers + <span
  class=number>6</span>, result, <span class=number>2</span>, <span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>swprnge1.cpp<a name=E0VE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'>* word1 = </span><span
  class=string>&quot;World&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'>* word2 = </span><span
  class=string>&quot;Hello&quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; word1 &lt;&lt; </span><span
  class=string>&quot; &quot;</span><span style='color:black'> &lt;&lt; word2 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>swap_ranges (word1, word1 + ::strlen (word1), word2);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; word1 &lt;&lt; </span><span
  class=string>&quot; &quot;</span><span style='color:black'> &lt;&lt; word2 &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec8.cpp<a name=E0TE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TE0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;capacity = &quot;</span><span style='color:black'> &lt;&lt; v.capacity () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.push_back (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;capacity = &quot;</span><span style='color:black'> &lt;&lt; v.capacity () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.reserve (<span
  class=number>5000</span>);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;capacity = &quot;</span><span style='color:black'> &lt;&lt; v.capacity () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>plus.cpp<a name=E0RE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RE0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input1 [<span class=number>4</span>] = { <span
  class=number>1</span>, <span class=number>6</span>, <span class=number>11</span>, <span
  class=number>8</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  class=keyword>int</span><span style='color:black'> input2 [<span
  class=number>4</span>] = { <span class=number>1</span>, <span class=number>5</span>, <span
  class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> total = <o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>inner_product (input1, input1 + <span
  class=number>4</span>, input2, <span class=number>0</span>, plus&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; (), times &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;total = &quot;</span><span style='color:black'> &lt;&lt; total &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>remcopy1.cpp<a name=E0PE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> result[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>0</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>remove_copy (numbers, numbers + <span
  class=number>6</span>, result, <span class=number>2</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>error2.cpp<a name=E0NE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=comment>// Compile this code with the symbol OS_USE_EXCEPTIONS defined.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>try</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v.pop_back (); </span><span
  class=comment>// Generates an exception.</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>catch</span><span style='color:black'> (</span><span
  class=keyword>const char</span><span style='color:black'>* str)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;Caught exception &quot;</span><span style='color:black'> &lt;&lt; str &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>iterswp1.cpp<a name=E0LE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (v1.begin (), v1.end (), <span
  class=number>0</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iter_swap (v1.begin (), v1.begin () + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v1.begin (), v1.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>remif1.cpp<a name=E0JE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> odd (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> a_ % <span
  class=number>2</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>}<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>0</span>, <span class=number>1</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>remove_if (numbers, numbers + <span
  class=number>6</span>, odd);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>foreach1.cpp<a name=E0HE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>void</span><span
  style='color:black'> print_sqr (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; a_ * a_ &lt;&lt; </span><span
  class=string>&quot; &quot;</span><span style='color:black'>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v1.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v1[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>for_each (v1.begin (), v1.end (), print_sqr);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>parsrtc0.cpp<a name=E0FE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>3</span>, <span class=number>1</span>, <span class=number>6</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result[<span class=number>3</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sort_copy (numbers, numbers + <span
  class=number>6</span>, result, result + <span class=number>3</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>pqueue2.cpp<a name=E0DE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DE0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>priority_queue&lt;deque&lt;</span><span
  class=keyword>char</span><span style='color:black'>*&gt;, greater_s&gt; q;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>q.push ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;cat&quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>q.push ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;dog&quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>q.push ((</span><span
  class=keyword>char</span><span style='color:black'>*) </span><span
  class=string>&quot;ape&quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (!q.empty ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; q.top () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>q.pop ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>binsrch1.cpp<a name=E0BE0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BE0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> vector[<span class=number>100</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>100</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>vector[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (binary_search (vector, vector + <span
  class=number>100</span>, <span class=number>42</span>))<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;found 42&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>else</span><span style='color:black'><o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;did not find 42&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>ptrunf2.cpp<a name=E06D0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06D0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> even (</span><span class=keyword>int</span><span
  style='color:black'> n_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> (n_ % <span
  class=number>2</span>) == <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = find_if (array, array + <span
  class=number>3</span>, ptr_fun (even));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>if</span><span style='color:black'> (p != array + <span
  class=number>3</span>)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *p &lt;&lt; </span><span
  class=string>&quot; is even&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rotcopy0.cpp<a name=E04D0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04D0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result[<span class=number>6</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>rotate_copy (numbers, numbers + <span
  class=number>3</span>, numbers + <span class=number>6</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>mkheap0.cpp<a name=E02D0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02D0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>5</span>, <span class=number>10</span>, <span class=number>4</span>, <span
  class=number>13</span>, <span class=number>11</span>, <span class=number>19</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>make_heap (numbers, numbers + <span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>6</span>; i &gt;= <span
  class=number>1</span>; i--)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[<span
  class=number>0</span>] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>pop_heap (numbers, numbers + i);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>copy1.cpp<a name=E0ZD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>char</span><span
  style='color:black'> string[<span class=number>23</span>] = </span><span
  class=string>&quot;A string to be copied.&quot;</span><span style='color:
  black'>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'> result[<span
  class=number>23</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>copy (string, string + <span
  class=number>23</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot; Src: &quot;</span><span style='color:black'> &lt;&lt; string &lt;&lt; </span><span
  class=string>&quot;\nDest: &quot;</span><span style='color:black'> &lt;&lt; result &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>find0.cpp<a name=E0XD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>10</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>4</span>, <span
  class=number>9</span>, <span class=number>16</span>, <span class=number>25</span>, <span
  class=number>36</span>, <span class=number>49</span>, <span class=number>64</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* location;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>location = find (numbers, numbers + <span
  class=number>10</span>, <span class=number>25</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Found 25 at offset &quot;</span><span style='color:black'> &lt;&lt; (location - numbers) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>partsum0.cpp<a name=E0VD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span>, <span class=number>6</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result[<span class=number>6</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sum (numbers, numbers + <span
  class=number>6</span>, result);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i ++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; result[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bvec1.cpp<a name=E0TD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TD0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>bit_vector b (<span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; b.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; b[i];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>b[<span
  class=number>0</span>] = b[<span class=number>2</span>] = <span class=number>1</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; b.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; b[i];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bind2nd1.cpp<a name=E0RD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RD0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>replace_if (array, array + <span
  class=number>3</span>, <o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>binder2nd&lt;greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; (greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; (), <span
  class=number>2</span>), <span class=number>4</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bind1st1.cpp<a name=E0PD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PD0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = remove_if (array, array + <span
  class=number>3</span>, <o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">    </span>binder1st&lt;less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; (less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; (), <span
  class=number>2</span>));<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'>* i = array; i != p; i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>reviter2.cpp<a name=E0ND0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ND0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>1</span>, <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (array, array + <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::reverse_iterator r;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (r = v.rbegin (); r != v.rend (); r++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *r &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>copy2.cpp<a name=E0LD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>v[i] = i;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>ostream_iterator&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; iter (cout, </span><span
  class=string>&quot; &quot;</span><span style='color:black'>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>copy (v.begin (), v.end (), iter);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>max2.cpp<a name=E0JD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_compare (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; max (</span><span
  class=string>&quot;shoe&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;shine&quot;</span><span style='color:black'>, str_compare) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>min2.cpp<a name=E0HD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;string.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> str_compare (</span><span class=keyword>const char</span><span
  style='color:black'>* a_, </span><span class=keyword>const char</span><span
  style='color:black'>* b_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> ::strcmp (a_, b_) &lt; <span
  class=number>0</span> ? <span class=number>1</span> : <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; min (</span><span
  class=string>&quot;shoe&quot;</span><span style='color:black'>, </span><span
  class=string>&quot;shine&quot;</span><span style='color:black'>, str_compare) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>parsrt0.cpp<a name=E0FD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>3</span>, <span class=number>1</span>, <span class=number>6</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sort (numbers, numbers + <span
  class=number>3</span>, numbers + <span class=number>6</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>partsrt0.cpp<a name=E0DD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DD0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>3</span>, <span class=number>1</span>, <span class=number>6</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>partial_sort (numbers, numbers + <span
  class=number>3</span>, numbers + <span class=number>6</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bnegate1.cpp<a name=E0BD0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BD0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>4</span>] = { <span
  class=number>4</span>, <span class=number>9</span>, <span class=number>7</span>, <span
  class=number>1</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (array, array + <span
  class=number>4</span>, binary_negate&lt;greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; (greater&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ()));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>nthelem0.cpp<a name=E06C0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06C0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>1</span>, <span class=number>0</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>nth_element (numbers, numbers + <span
  class=number>3</span>, numbers + <span class=number>6</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>revbit2.cpp<a name=E04C0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04C0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>1</span>, <span
  class=number>5</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (array, array + <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;::reverse_iterator r;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (r = v.rbegin (); r != v.rend (); r++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *r &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>count0.cpp<a name=E02C0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02C0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>10</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>1</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result = <span
  class=number>0</span>;<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>count (numbers, numbers + <span
  class=number>10</span>, <span class=number>1</span>, result);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Found &quot;</span><span style='color:black'> &lt;&lt; result &lt;&lt; </span><span
  class=string>&quot; 1's.&quot;</span><span style='color:black'> &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>negate.cpp<a name=E0ZC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZC0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> output[<span class=number>3</span>];<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>transform (input, input + <span
  class=number>3</span>, output, negate&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; output[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>pqueue1.cpp<a name=E0XC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XC0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>priority_queue&lt;deque&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt;, less&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; q;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>q.push (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>q.push (<span
  class=number>101</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>q.push (<span
  class=number>69</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (!q.empty ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; q.top () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>q.pop ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>genern1.cpp<a name=E0VC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0VC0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v1 (<span
  class=number>10</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>generate_n (v1.begin (), v1.size (), rand);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>10</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v1[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rotate0.cpp<a name=E0TC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TC0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>rotate (numbers, numbers + <span
  class=number>3</span>, numbers + <span class=number>6</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>foreach0.cpp<a name=E0RC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RC0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>void</span><span
  style='color:black'> print (</span><span class=keyword>int</span><span
  style='color:black'> a_)<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'>{<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; a_ &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>10</span>] = { <span
  class=number>1</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>5</span>, <span class=number>8</span>, <span
  class=number>13</span>, <span class=number>21</span>, <span class=number>34</span>, <span
  class=number>55</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>for_each (numbers, numbers + <span
  class=number>10</span>, print);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>alg2.cpp<a name=E0PC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PC0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> i [] = { <span class=number>1</span>, <span
  class=number>4</span>, <span class=number>2</span>, <span class=number>8</span>, <span
  class=number>2</span>, <span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> n = <span class=number>0</span>; </span><span
  class=comment>// Must be initialized, as count increments n.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>count (i, i + <span
  class=number>6</span>, <span class=number>2</span>, n);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;Count of 2s = &quot;</span><span style='color:black'> &lt;&lt; n &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>gener1.cpp<a name=E0NC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NC0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> numbers[<span
  class=number>10</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>generate (numbers, numbers + <span
  class=number>10</span>, rand);<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>10</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>replace0.cpp<a name=E0LC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LC0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>replace (numbers, numbers + <span
  class=number>6</span>, <span class=number>2</span>, <span class=number>42</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>rndshuf0.cpp<a name=E0JC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JC0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>4</span>, <span class=number>5</span>, <span class=number>6</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>random_shuffle (numbers, numbers + <span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bind1st2.cpp<a name=E0HC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HC0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'>* p = remove_if (array, array + <span
  class=number>3</span>, bind1st(less&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; (), <span class=number>2</span>));<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'>* i = array; i != p; i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; *i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>unique1.cpp<a name=E0FC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FC0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>8</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>1</span>, <span
  class=number>2</span>, <span class=number>2</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>4</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>unique (numbers, numbers + <span
  class=number>8</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>8</span>; i ++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>bind2nd2.cpp<a name=E0DC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DC0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>3</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>replace_if (array, array + <span
  class=number>3</span>, bind2nd (greater&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; (), <span class=number>2</span>), <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>vec5.cpp<a name=E0BC0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BC0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [] = { <span class=number>1</span>, <span
  class=number>4</span>, <span class=number>9</span>, <span class=number>16</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (array, array + <span
  class=number>4</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; v.size (); i++)<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; </span><span
  class=string>&quot;v[&quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; </span><span
  class=string>&quot;] = &quot;</span><span style='color:black'> &lt;&lt; v[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>iterswp0.cpp<a name=E06B0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB06B0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>iter_swap (numbers, numbers + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>remove1.cpp<a name=E04B0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB04B0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span>, <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>3</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>remove (numbers, numbers + <span
  class=number>6</span>, <span class=number>1</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>stblsrt1.cpp<a name=E02B0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB02B0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array[<span class=number>6</span>] = { <span
  class=number>1</span>, <span class=number>50</span>, -<span class=number>10</span>, <span
  class=number>11</span>, <span class=number>42</span>, <span class=number>19</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>stable_sort (array, array + <span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>reverse1.cpp<a name=E0ZB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0ZB0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>0</span>, <span class=number>1</span>, <span class=number>2</span>, <span
  class=number>3</span>, <span class=number>4</span>, <span class=number>5</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>reverse (numbers, numbers + <span
  class=number>6</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>6</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>logicnot.cpp<a name=E0XB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0XB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>bool</span><span
  style='color:black'> input [<span class=number>7</span>] = { <span
  class=number>1</span>, <span class=number>0</span>, <span class=number>0</span>, <span
  class=number>1</span>, <span class=number>1</span>, <span class=number>1</span>, <span
  class=number>1</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> n = <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>count_if (input, input + <span
  class=number>7</span>, logical_not&lt;</span><span class=keyword>bool</span><span
  style='color:black'>&gt; (), n);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;count = &quot;</span><span style='color:black'> &lt;&lt; n &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>sort1.cpp<a name=E0VB0BA></a></h3>

<h3>bnegate2.cpp<a name=E0TB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0TB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt; <o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>4</span>] = { <span
  class=number>4</span>, <span class=number>9</span>, <span class=number>7</span>, <span
  class=number>1</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (array, array + <span
  class=number>4</span>, not2 (greater&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ()));<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>queue1.cpp<a name=E0RB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0RB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>queue&lt;list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; q;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>q.push (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>q.push (<span
  class=number>101</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>q.push (<span
  class=number>69</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (!q.empty ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; q.front () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>q.pop ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>stack1.cpp<a name=E0PB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0PB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>stack&lt;deque&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; s;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.push (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>s.push (<span
  class=number>101</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>s.push (<span
  class=number>69</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (!s.empty ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; s.top () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>s.pop ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>greateq.cpp<a name=E0NB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0NB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>4</span>] = { <span
  class=number>3</span>, <span class=number>1</span>, <span class=number>4</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (array, array + <span
  class=number>4</span>, greater_equal&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>stack2.cpp<a name=E0LB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0LB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>stack&lt;list&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; &gt; s;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>s.push (<span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>s.push (<span
  class=number>101</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>s.push (<span
  class=number>69</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>while</span><span style='color:black'> (!s.empty ())<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; s.top () &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>s.pop ();<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>}<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>lesseq.cpp<a name=E0JB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0JB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>4</span>] = { <span
  class=number>3</span>, <span class=number>1</span>, <span class=number>4</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (array, array + <span
  class=number>4</span>, less_equal&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>divides.cpp<a name=E0HB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0HB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input [<span class=number>3</span>] = { <span
  class=number>2</span>, <span class=number>3</span>, <span class=number>4</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> result = accumulate (input, input + <span
  class=number>3</span>, <span class=number>48</span>, divides&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;result = &quot;</span><span style='color:black'> &lt;&lt; result &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>greater.cpp<a name=E0FB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0FB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>4</span>] = { <span
  class=number>3</span>, <span class=number>1</span>, <span class=number>4</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (array, array + <span
  class=number>4</span>, greater&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>swap1.cpp<a name=E0DB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0DB0BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> a = <span class=number>42</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> b = <span class=number>19</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;a = &quot;</span><span style='color:black'> &lt;&lt; a &lt;&lt; </span><span
  class=string>&quot; b = &quot;</span><span style='color:black'> &lt;&lt; b &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>swap (a, b);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;a = &quot;</span><span style='color:black'> &lt;&lt; a &lt;&lt; </span><span
  class=string>&quot; b = &quot;</span><span style='color:black'> &lt;&lt; b &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>times.cpp<a name=E0BB0BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB0BB0BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> input [<span class=number>4</span>] = { <span
  class=number>1</span>, <span class=number>5</span>, <span class=number>7</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> total = accumulate (input, input + <span
  class=number>4</span>, <span class=number>1</span>, times&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; ());<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;total = &quot;</span><span style='color:black'> &lt;&lt; total &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>less.cpp<a name=E6BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB6BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> array [<span class=number>4</span>] = { <span
  class=number>3</span>, <span class=number>1</span>, <span class=number>4</span>, <span
  class=number>2</span> };<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>sort (array, array + <span
  class=number>4</span>, less&lt;</span><span class=keyword>int</span><span
  style='color:black'>&gt; ());<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>4</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; array[i] &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>alg1.cpp<a name=E4BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB4BA>#include</span><span style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> i = min (<span
  class=number>4</span>, <span class=number>7</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;min (4, 7) = &quot;</span><span style='color:black'> &lt;&lt; i &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>char</span><span style='color:black'> c = max (<span
  class=character>'a'</span>, <span class=character>'z'</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;max ('a', 'z') = &quot;</span><span style='color:black'> &lt;&lt; c &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>filln1.cpp<a name=E2BA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EB2BA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>fill_n (v.begin (), v.size (), <span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>10</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>iota1.cpp<a name=EZBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBZBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> numbers[<span
  class=number>10</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>iota (numbers, numbers + <span
  class=number>10</span>, <span class=number>42</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>10</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>nextprm0.cpp<a name=EXBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBXBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v1[<span class=number>3</span>] = { <span class=number>0</span>, <span
  class=number>1</span>, <span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>next_permutation (v1, v1 + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v1[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>prevprm0.cpp<a name=EVBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBVBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> v1[<span class=number>3</span>] = { <span class=number>0</span>, <span
  class=number>1</span>, <span class=number>2</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>prev_permutation (v1, v1 + <span
  class=number>3</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>3</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v1[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>fill1.cpp<a name=ETBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBTBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector &lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v (<span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>fill (v.begin (), v.end (), <span
  class=number>42</span>);<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>10</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; v[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>pair2.cpp<a name=ERBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBRBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair&lt;</span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>&gt; p = make_pair (<span
  class=number>1</span>, <span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;p.first = &quot;</span><span style='color:black'> &lt;&lt; p.first &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;p.second = &quot;</span><span style='color:black'> &lt;&lt; p.second &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>error1.cpp<a name=EPBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBPBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=comment>// Compile this code without defining the symbol OS_USE_EXCEPTIONS.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>vector&lt;</span><span
  class=keyword>int</span><span style='color:black'>&gt; v;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>v.pop_back (); </span><span
  class=comment>// Generates an empty object error.</span><span
  style='color:black'><o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>pair0.cpp<a name=ENBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBNBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair&lt;</span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>&gt; p = make_pair (<span
  class=number>1</span>, <span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;p.first = &quot;</span><span style='color:black'> &lt;&lt; p.first &lt;&lt; </span><span
  class=string>&quot;, p.second = &quot;</span><span style='color:black'> &lt;&lt; p.second &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>pair1.cpp<a name=ELBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBLBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>pair&lt;</span><span
  class=keyword>int</span><span style='color:black'>, </span><span
  class=keyword>int</span><span style='color:black'>&gt; p = make_pair (<span
  class=number>1</span>, <span class=number>10</span>);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; </span><span
  class=string>&quot;p.first = &quot;</span><span style='color:black'> &lt;&lt; p.first &lt;&lt; </span><span
  class=string>&quot;, p.second = &quot;</span><span style='color:black'> &lt;&lt; p.second &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>minelem1.cpp<a name=EJBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBJBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { -<span
  class=number>10</span>, <span class=number>15</span>, -<span class=number>100</span>, <span
  class=number>36</span>, -<span class=number>242</span>, <span class=number>42</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; *min_element (numbers, numbers + <span
  class=number>6</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>maxelem1.cpp<a name=EHBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBHBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>6</span>] = { <span
  class=number>4</span>, <span class=number>10</span>, <span class=number>56</span>, <span
  class=number>11</span>, -<span class=number>42</span>, <span class=number>19</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; *max_element (numbers, numbers + <span
  class=number>6</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>max1.cpp<a name=EFBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBFBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; max (<span
  class=number>42</span>, <span class=number>100</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>min1.cpp<a name=EDBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBDBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; min (<span
  class=number>42</span>, <span class=number>100</span>) &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>

<h3>adjdiff0.cpp<a name=EBBA></a><o:p></o:p></h3>

<div>

<table border=0 cellpadding=0 width="98%" bgcolor="#f4f4f4" style='width:98.0%;
 mso-cellspacing:1.5pt;margin-left:3.95pt;background:#F4F4F4'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre style='text-align:justify'><span
  class=preprocessor>
  <div id=EBBBA>#include</span><span style='color:black'> &lt;stl.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=preprocessor>#include</span><span
  style='color:black'> &lt;iostream.h&gt;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> numbers[<span class=number>5</span>] = { <span
  class=number>1</span>, <span class=number>2</span>, <span class=number>4</span>, <span
  class=number>8</span>, <span class=number>16</span> };<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></pre><pre
  style='text-align:justify'><span class=keyword>int</span><span
  style='color:black'> main ()<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'>{<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>int</span><span style='color:black'> difference[<span
  class=number>5</span>];<o:p></o:p></span></pre><pre style='text-align:justify'><span
  style='color:black'><span style="mso-spacerun: yes">  </span>adjacent_difference (numbers, numbers + <span
  class=number>5</span>, difference);<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (</span><span
  class=keyword>int</span><span style='color:black'> i = <span class=number>0</span>; i &lt; <span
  class=number>5</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; numbers[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>for</span><span style='color:black'> (i = <span class=number>0</span>; i &lt; <span
  class=number>5</span>; i++)<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">    </span>cout &lt;&lt; difference[i] &lt;&lt; <span
  class=character>' '</span>;<o:p></o:p></span></pre><pre style='text-align:
  justify'><span style='color:black'><span style="mso-spacerun: yes">  </span>cout &lt;&lt; endl;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'><span style="mso-spacerun: yes">  </span></span><span
  class=keyword>return</span><span style='color:black'> <span class=number>0</span>;<o:p></o:p></span></pre><pre
  style='text-align:justify'><span style='color:black'>}<o:p></o:p></span></pre></td>
 </tr>
 </div>
</table>

</div>


<div class=MsoNormal align=center style='text-align:center'><i><span
style='font-size:9.0pt;font-family:Arial;color:#8088A0'>

<hr size=1 width="100%" noshade color="#8088a0" align=center>

</span></i></div>

<i><COPYRIGHT></i>

<p class=MsoNormal align=right style='text-align:right'><i><span
style='font-size:9.0pt;font-family:Arial;color:#8088A0'>К сожалению, все наши
попытки найти авторов этого перевода были тщетны. Тем не менее, мы сочли
необходимым опубликовать этот материал ввиду скудности информации по данной
тематике на русском языке. </COPYRIGHT></span></i><span style='font-size:10.0pt;
font-family:Verdana;color:black'><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana;color:black'><script language="JavaScript">
<!--
Mu="u1358.84.spylog.com";Md=document;Mnv=navigator;Mp=1;
Mn=(Mnv.appName.substring(0,2)=="Mi")?0:1;Mrn=Math.random();
Mt=(new Date()).getTimezoneOffset();
Mz="p="+Mp+"&rn="+Mrn+"&t="+Mt;
My="";
My+="<a href='http://"+Mu+"/cnt?cid=135884&f=3&p="+Mp+"&rn="+Mrn+"' target=_blank>";
My+="<img src='http://"+Mu+"/cnt?cid=135884&"+Mz+"&r1="+escape(Md.referrer)+"&r="+escape(parent.document.referrer)+"&pg="+escape(window.location.href)+"' border=0 width=1 height=1 alt=' '>";
My+="</a>";Md.write(My);//-->
</script><!-- SpyLOG f:1211 --><a
href="http://u1358.84.spylog.com/cnt?cid=135884&amp;f=3&amp;p=1" target="_blank"><NOSCRIPT><span
style='font-family:Tahoma'><img border=0 width=1 height=1 id="_x0000_i1040"
src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\cnt.gif"
alt=" "></span></a><script language="JavaScript">
	hotlog_js="1.0";
	hotlog_r=""+Math.random()+"&s=21251&im=134&r="+escape(document.referrer)+"&pg="+
	escape(window.location.href);
	document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script></NOSCRIPT><!-- SpyLOG --><!-- HotLog --><script language="javascript1.1">
							hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script><script language="javascript1.2">
			hotlog_js="1.2";
	hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
	(((navigator.appName.substring(0,3)=="Mic"))?
	screen.colorDepth:screen.pixelDepth)
</script><script language="javascript1.3">
hotlog_js="1.3"
</script><script language="JavaScript">
hotlog_r+="&js="+hotlog_js;
	document.write("<a href='http://click.hotlog.ru/?21251' target='_top'><img "+
	" src='http://hit2.hotlog.ru/cgi-bin/hotlog/count?"+
	hotlog_r+"&' border=0 width=1 height=1 alt=HotLog></a>")
</script><a href="http://click.hotlog.ru/?21251" target="_top"><NOSCRIPT><span
style='font-family:Tahoma'><img border=0 width=1 height=1 id="_x0000_i1046"
src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\img.gif"
alt=HotLog></span></a><a href="http://top100.rambler.ru/top100/"></NOSCRIPT><!-- /HotLog --><!--begin of Rambler's Top100 code --><span
style='font-family:Tahoma'><img border=0 width=1 height=1 id="_x0000_i1047"
src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\top100.gif"></span></a><script language="JavaScript">
<!--
d=document;a='';a+=';r='+escape(d.referrer)
js=10//-->
</script><!--end of Top100 code--><!--Rating@Mail.ru COUNTER--><script language="JavaScript1.1">
<!--
a+=';j='+navigator.javaEnabled()
js=11//-->
</script><script language="JavaScript1.2">
<!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//-->
</script><script language="JavaScript1.3">
<!--
js=13//-->
</script><script language="JavaScript">
<!--
d.write('<img src="http://top.list.ru/counter'+
'?id=555384;js='+js+a+';rand='+Math.random()+
'" height=1 width=1>')
if(js>11)d.write('<'+'!-- ')//-->
</script><NOSCRIPT><img border=0 width=1 height=1 id="_x0000_i1053"
src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\counter.gif"><script language="JavaScript">
<!--
if(js>11)d.write('--'+'>')//-->
</script></NOSCRIPT><o:p></o:p></span></p>

<!--/COUNTER-->

<div>

<table border=1 cellspacing=0 cellpadding=0 width="100%" bgcolor="#e6e6e6"
 style='width:100.0%;mso-cellspacing:0cm;margin-left:3.95pt;background:#E6E6E6;
 border:solid #9DAABD .75pt;mso-padding-alt:0cm 3.95pt 0cm 3.95pt'
 celpadding=2>
 <tr>
  <td nowrap style='border:none;background:#F4F4F4;padding:0cm 3.95pt 0cm 3.95pt'>
  <p class=MsoNormal style='margin-top:3.95pt;margin-right:0cm;margin-bottom:
  3.95pt;margin-left:0cm;text-align:justify'><b><span style='font-size:10.0pt;
  font-family:Verdana;color:#646464'><script language="JavaScript"  src="Примеры Руководство по стандартной библиотеке шаблонов (STL)_files/shMenu.js" type="text/javascript">
  </script><o:p></o:p></span></b></p>
  </td>
  <td width="100%" nowrap style='width:100.0%;border:none;background:#F4F4F4;
  padding:0cm 3.95pt 0cm 3.95pt'>
  <p class=MsoNormal align=right style='margin-top:3.95pt;margin-right:0cm;
  margin-bottom:3.95pt;margin-left:0cm;text-align:right'><b><span
  style='font-size:10.0pt;font-family:Verdana;color:#646464'>&nbsp;<a
  href="http://www.rsdn.ru/article/cpp/stl/sampl.xml?print" target="_blank"
  title="Версия для печати"><span style='font-family:Tahoma'><img border=0
  width=16 height=14 id="_x0000_i1056"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\printer2.gif"
  align=absMiddle></span></a>&nbsp;&nbsp;<a
  href="http://www.rsdn.ru/forum/?mid=351161" target="_self"
  title="Перейти к обсуждению статьи"><span style='font-size:7.5pt;font-family:
  Tahoma;color:#646464'> Сообщений </span><span style='font-family:Tahoma;
  color:black'>1</span></a>&nbsp;&nbsp;<a
  href="http://www.rsdn.ru/forum/?mid=351161" target="_self"
  title="Перейти к обсуждению статьи"><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1057"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\showfr.gif"
  align=absMiddle></span></a>&nbsp;<a
  href="http://www.rsdn.ru/Forum/RateList.aspx?mid=351161"><span
  style='font-size:7.5pt;font-family:Tahoma;color:#646464'> Оценка </span><span
  style='font-family:Tahoma;color:black'>220</span></a>&nbsp;&nbsp; <a
  href="http://www.rsdn.ru/Users/Private/AddFav.aspx?mid=351161" target="_blank"
  title="Добавить в избранное"><span style='font-family:Tahoma'><img border=0
  width=14 height=14 id="_x0000_i1058"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\fav.gif"
  onclick="AddFav(351161);return false;" align=absMiddle></span></a>&nbsp;&nbsp;<a
  href="javascript:SubMsg(351161)" title="Подписка на сообщения"><span
  style='font-family:Tahoma'><img border=0 width=18 height=14 id="_x0000_i1059"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\sub.gif"
  class=i align=absMiddle></span></a>&nbsp;&nbsp;&nbsp;</span></b><b><span
  style='font-size:7.5pt;font-family:Verdana;color:#646464'>Оценить </span></b><b><span
  style='font-size:10.0pt;font-family:Verdana;color:#646464'><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=-3"
  target="_blank" title="+1"><span style='font-family:Tahoma'><img border=0
  width=18 height=14 id="_x0000_i1060"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n11.gif"
  onclick="RateMsg(351161,-3);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=1"
  target="_blank" title=Интересно><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1061"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n1.gif"
  onclick="RateMsg(351161,1);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=2"
  target="_blank" title=Спасибо><span style='font-family:Tahoma'><img border=0
  width=18 height=14 id="_x0000_i1062"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n2.gif"
  onclick="RateMsg(351161,2);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=3"
  target="_blank" title=Супер><span style='font-family:Tahoma'><img border=0
  width=18 height=14 id="_x0000_i1063"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\n3.gif"
  onclick="RateMsg(351161,3);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=-1"
  target="_blank" title="Удалить оценку"><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1064"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\nx.gif"
  onclick="RateMsg(351161,-1);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=-4"
  target="_blank" title=Согласен><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1065"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\np.gif"
  onclick="RateMsg(351161,-4);return false;" align=absMiddle></span></a><a
  href="http://www.rsdn.ru/forum/Private/Rate.aspx?mid=351161&amp;rate=0"
  target="_blank" title="Не согласен"><span style='font-family:Tahoma'><img
  border=0 width=18 height=14 id="_x0000_i1066"
  src="..\..\Kate\BOOKS\Эккель\Примеры%20Руководство%20по%20стандартной%20библиотеке%20шаблонов%20(STL)_files\nm.gif"
  onclick="RateMsg(351161,0);return false;" align=absMiddle eight=14px></span></a>&nbsp;
  <o:p></o:p></span></b></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
