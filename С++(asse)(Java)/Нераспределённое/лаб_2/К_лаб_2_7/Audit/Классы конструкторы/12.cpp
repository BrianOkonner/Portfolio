#include <stdio.h>
#include <iostream.h>
class Number
{

private:	
int m,n,mn;
// 0  конструктор по умолчанию если не разрешаем создавать обьекты по умолчанию
/*Number()                  
	{ 	}
*/
public:

//1  конструктор по умолчанию разрешаем создавать обьекты по умолчанию
Number()                  
	{ 	}
//2 конструктор  с одним параметром
	Number(int x)
	{ m=x;
	 n=12;
	}

//3 конструктор  с двумя параметром  
Number(int x,int y)
	{ m=x;
	  n=y;
	}
//4 конструктор  с параметрами по умолчанию 
/*Number(int x=3,int y=3,int d=10)
	{m=x;
	 n=y+d;
	}
*/
//5
int nod()
{
	mn=m*n;
	while (n != m)  
	
	if (n>m) 
      n=n-m;
	  else m=m-n;
	   	return n;
}
//6
int nod(int n, int m)
{
	return (!m)? n : nod(m,n%m);
//	return n;
}
//7
int nokr()
{
	return (mn)/nod(m,n);
}
//8
int nok()
{
	return (mn)/nod();
}
};

int main()

{	//  Если нет конструкторов  ОК
//	Number nn1;    //ОК
//	Number x1[5];  //ок

//  Если есть конструктор 0
//	Number nn2;  //Ошибка
	Number x2[5];//Ошибка


//  Если есть  только конструктор 1 и нет  конструктора 0	
//	Number nn;  //Ок
	Number x[5];//Ок
	

//  Если нет  конструктора 0  и нет  конструктор 1
//	есть конструктор 2	
//	Number nn;  //Ошибка, нужен обязательно 1
	Number xx[5];//Ошибка


//  Если нет  конструктора 0  и нет  конструктор 1
//	есть конструктор 2 и  3	
//	Number nn(3,8);  // ОК
//	Number y[5];    //Ошибка, нужен обязательно 1



//  Если нет  конструктора 0  и нет  конструктор 1
//	есть конструктор  2 и 3 и 4	
//	Number nn(3,8);  // Ошибка непонятно какой конструктор вызывать
	Number z[5];     //Ошибка, нужен обязательно 1


    Number n1(8);     // Ошибка, если  есть  конструктор 1 2 3 4 мешает 4
    Number n2(10,15); // Ошибка, если есть  конструктор 1 2 3 4 мешает 4
    Number n3;        // Ошибка, если есть  конструктор 1 2 3 4 мешает 4
	Number xy[5];     //  ОК, есть  конструктор 1 2 3 4  не мешает 4
	int m,n,r1,r2;
	r1=n1.nod();
	r2=n2.nok();
//	cout << "Nod="<<n1.nod()<<"Nok="<<n2.nok()<<endl;// Ошибка	 не правильный результат
	cout << "Nod="<<r1<<"Nok="<<r2<<endl; //ОК	

	cout << n2.nod()<<endl;
	cout << n2.nok()<<endl;
	return 1;
}	
