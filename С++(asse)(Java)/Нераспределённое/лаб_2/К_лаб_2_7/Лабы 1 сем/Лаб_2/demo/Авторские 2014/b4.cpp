/*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*															5/10/14 6:40 p.m.												  *
*														     ПМ 7 группа													  *
*															Ruslan Bondar													  *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* Лабораторная работа №2 Задача B4: 																						  *
* Дано M, a, b, h																											  *
* Посчитать сумму от N = 1 до M выражения (X^N / 2*N) * (cosN*X + sinN*X), где a <= x <= b. Значение x изменяется с шагом h.  *
* Вывести результат, используя для вычисления функций ряд Тейлора, а также используя встроенную библиотеку math 			  *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* Напишем функции cos, sin через ряд Тейлора. В цикле вычислим заданную формулу по условию задачи с помощью нашей функции     *
* синуса и косинуса, а также с помощтю встроенной.                                                                            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/

//Подключаем библиотеки
//Для работы с файлами
#include <fstream>
//Для вывода ошибок и разной отладочной информации
#include <iostream>
//Для использования математический функций. Например sin, cos.
#include <cmath>
#include <iomanip>


//Определяем пространство имен
using namespace std;

//Определяем входной поток и выходной поток
ifstream input;
ofstream output;

const double EPS = 0.000000001;
const double pi = 3.1415926535;

double rad(int A) {
	return(pi / 180 * A);
}

double TylorCos(double x) {
	double j = 1;
	double res = 0;
	int n = 1;

	//Убираем лишний угол. Отнимаем окружность.
	while ((x >= 2 * pi) || (x <= -2 * pi)) {
		if (x < 0) x = x + 2 * pi;
			else x = x - 2 * pi;
	}
	//Вычисление значения cos
	do {
		res = res + j;
		j = j * (-1 * x * x / ((2 * n) * (2 * n - 1)));
		n++;
	} while (fabs(j) > EPS);

	//Дополнительно смотрим погрешность вычислений
	if ((res > 0) && (res <= EPS)) res = 0;
	if ((res < 0) && (res >= -EPS)) res = 0;
	return res;
}

double TylorSin(double x) {
	double res = 0;
	int n = 1;

	//Убираем лишний угол. Отнимаем окружность.
	while ((x >= 2 * pi) || (x <= -2 * pi)) {
		if (x < 0) x = x + 2 * pi;
		else x = x - 2 * pi;
	}

	//Вычисление значения sin
	double j = x;
	do {
		res = res + j;
		j = j * (-1.0 * x * x) / ((2 * n) * (2 * n + 1));
		n++;
	} while (fabs(j) > EPS);
	
	//Дополнительно смотрим погрешность вычислений
	if ((res > 0) && (res <= EPS)) res = 0;
	if ((res < 0) && (res >= -EPS)) res = 0;
	return res;
}

//Функция возведения дробного числа в степень
double ex(double a, int n) {
	double res = 1;
	for (int i = 1; i <= n; i++)
		res = res * a;
	return res;
}


int main() {
	//Создаем переменные для входных данных. a, b - промежуток. h - шаг. M - сумма до M-го элемента последовательности
	double a, b, h;
	int M;

	input.open("inputData.txt");
	output.open("outputData.txt");
	
	//Делаем проверку открытия файла входных данных
	if (input.fail()) {
		cout << "Error! Input file can not be opened!" << endl;
		cout << "Please, create 'inputData.txt' file." << endl;
		system("pause");
		exit(1);
	}

	input >> M >> a >> b >> h;

	output << "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" << endl;
	output << "*   M = " << setw(10) << M << "                                                                      *" << endl;
	output << "*   a = " << setw(10) << a << "                                                                      *" << endl;
	output << "*   b = " << setw(10) << b << "                                                                      *" << endl;
	output << "*   h = " << setw(10) << h << "                                                                      *" << endl;
	output << "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" << endl;
	output << "*       X       *       Tylor COS and SIN         *       SIN and COS in <math>         *" << endl;
	output << "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" << endl;

	double TylorRes = 0;
	double StandartRes = 0;
	int i = 5;
	double x = a;
	while ((i <= M) && (a <= x) && (b >= x)) {
		TylorRes = ex(x, i) / (2 * i);
		//Чтобы не выполнять одно и тоже, просто приравняем
		StandartRes = TylorRes;

		TylorRes = TylorRes  * (TylorCos(i * x) + TylorSin(i * x));
		StandartRes = StandartRes  * (cos(i * x) + sin(i * x));
		output << "*" << setw(10) << x << "     *" << setw(27) << TylorRes << "      *" << setw(27) << StandartRes << "          *" << endl;
		i++;
		x = x + h;
	}

	output << "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" << endl;
	return 0;
}

/* 

Время работы: 1,444 секунды
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   M =         18                                                                      *
*   a =          3                                                                      *
*   b =          9                                                                      *
*   h =        0.3                                                                      *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*       X       *       Tylor COS and SIN         *       SIN and COS in <math>         *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*         3     *                   -2.65842      *                   -2.65842          *
*       3.3     *                    150.133      *                    150.133          *
*       3.6     *                    596.098      *                    596.098          *
*       3.9     *                    2550.65      *                    2550.65          *
*       4.2     *                    24753.5      *                    24753.5          *
*       4.5     *                     234307      *                     234307          *
*       4.8     *                    -355344      *                    -355344          *
*       5.1     *              -1.36644e+007      *              -1.36644e+007          *
*       5.4     *               1.72534e+008      *               1.72534e+008          *
*       5.7     *              -1.71671e+009      *              -1.71671e+009          *
*         6     *               6.98888e+009      *               6.98888e+009          *
*       6.3     *                2.3667e+011      *                2.3667e+011          *
*       6.6     *              -3.97512e+011      *              -3.97512e+011          *
*       6.9     *              -3.09809e+013      *              -3.09809e+013          *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/