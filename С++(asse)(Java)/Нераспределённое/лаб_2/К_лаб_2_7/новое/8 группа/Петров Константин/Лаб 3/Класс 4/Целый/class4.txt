/*		Петров Констнатин
8 группа

Реализация класса 4 + доп. задачи

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Код ошибки

1 - Неположительная длина очереди длина очереди
2 - Очередь переполнена
3 - Очередь пустая
4 - Неверный выбор
5 - Ошибка входных данных
*/

#include <iostream>
#include <conio.h>
#include <fstream>
#include <windows.h>
#include <iomanip>
using namespace std;

class ArrayQueue {
	int size;
	int *p;
	int head;
	int tail;
	int n;
public:
	ArrayQueue(int size1);
	ArrayQueue(const ArrayQueue& q);
	~ArrayQueue();
	void Push(int val);
	int Peek();
	int Pop();
	bool IsEmpty();
	bool IsFull();
};

ArrayQueue::ArrayQueue(int size1) {
	if (size1 <= 0) {
		throw 1;
	}
	else {
		p = new int[size1];
		size = size1;
		n = 0;
		head = 0;
		tail = 0;
	}
}

ArrayQueue::ArrayQueue(const ArrayQueue& q) {
	p = new int[q.size];
	for (int i = 0; i < q.size; i++)
		p[i] = q.p[i];
	size = q.size;
	n = q.n;
	tail = q.tail;
	head = q.head;
	//cout << "Сработал конструктор копирования\n";
}

ArrayQueue::~ArrayQueue() {
	delete[]p;
}

void ArrayQueue::Push(int val) {
	if (IsFull()) {
		throw 2;
	}
	else {
		p[tail] = val;
		++tail;
		++n;
		tail %= (size);
	}
}

inline int ArrayQueue::Peek() {
	return p[(tail + size - 1) % size];
}

int ArrayQueue::Pop() {
	if (IsEmpty()) {
		throw 3;
	}
	else {
		int temp = p[head];
		head++;
		--n;
		head %= (size);
		return temp;
	}
}

inline bool ArrayQueue::IsEmpty() {
	return (n == 0);
}

inline bool ArrayQueue::IsFull() {
	return (n == size);
}

void Flavii();
void PaperSheet();
void Road();

int main() {
	setlocale(LC_ALL, "rus");
	int size, choice = 0;
	try {
		do {
			cout << "Выберите задачу :" << endl;
			cout << "1. Задача про Иосифа Флавия" << endl;
			cout << "2. Лист бумаги" << endl;
			cout << "3. Дорога" << endl;
			cout << "0 - выход" << endl;
			choice = _getch() - '0';
			system("cls");
			switch (choice) {
			case 0: {
				cout << "Программа завершена" << endl << endl;
				return 0;
			}
			case 1: {
				Flavii();
				break;
			}
			case 2: {
				PaperSheet();
				break;
			}
			case 3: {
				Road();
				break;
			}
			default: {
				system("cls");
				throw 4;
			}
			}
		} while (true);
	}
	catch (int a) {
		cout << "Что-то пошло не так....\n";
		cout << "Номер ошибки - " << a << endl << endl;
	}

	system("pause");
	return 0;
}

void Flavii() {
	int N;
	cout << "Введите количество участников " << endl;
	cin >> N;
	ArrayQueue Q1(N);

	cout << "Введите шаг удаления " << endl;
	int M;
	cin >> M;
	cout << endl;

	if (M < 1 || N < 1) {
		system("cls");
		throw 5;
	}

	for (int i = 1; i <= N; Q1.Push(i), ++i);

	while (N != 1) {
		for (int i = 1; i <= M; i++) {
			if (i == M) int q = Q1.Pop();
			else {
				int u = Q1.Pop();
				Q1.Push(u);
			}
		}
		--N;
	}

	cout << endl << "Последний участник - " << Q1.Pop() << endl;
	Sleep(5000);
	system("cls");
}

void PaperSheet() {
	ifstream fin("Input.txt");
	int N, M, **Lst;
	fin >> N >> M;
	if (N <= 0 || M <= 0)
		throw 5;

	Lst = new int *[N];
	for (int i = 0; i < N; i++)
		Lst[i] = new int[M];

	int i, j, k, x, y, x1, y1;
	cout << "-1 - обозначение дырки в листе" << endl << endl;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			fin >> Lst[i][j];
			cout << setw(4) << Lst[i][j] << " ";
		}
		cout << endl;
	}
	fin.close();

	ArrayQueue Xqueue(100), Yqueue(100);
	k = 0;
	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++) {
			if (Lst[i][j] == 0) {
				k++;
				Xqueue.Push(i);
				Yqueue.Push(j);
				Lst[i][j] = k;

				while (!Xqueue.IsEmpty()) {
					while (!Xqueue.IsEmpty()) {
						x = Xqueue.Peek();
						y = Yqueue.Peek();
						if (x > 0 && Lst[x - 1][y] == 0) {
							x1 = x - 1;
							Xqueue.Push(x1);
							Yqueue.Push(y);
							Lst[x1][y] = k;
						}
						if (x < N - 1 && Lst[x + 1][y] == 0) {
							x1 = x + 1;
							Xqueue.Push(x1);
							Yqueue.Push(y);
							Lst[x1][y] = k;
						}
						if (y > 0 && Lst[x][y - 1] == 0) {
							y1 = y - 1;
							Xqueue.Push(x);
							Yqueue.Push(y1);
							Lst[x][y1] = k;
						}
						if (y < M - 1 && Lst[x][y + 1] == 0) {
							y1 = y + 1;
							Xqueue.Push(x);
							Yqueue.Push(y1);
							Lst[x][y1] = k;
						}
						Xqueue.Pop();
						Yqueue.Pop();
					}
				}
			}
		}
	}

	cout << endl << endl << endl << "Количество кусков равно - " << k << endl;
	Sleep(5000);
	system("cls");
}

void Road() {
	ifstream fin1("Input1.txt");

	int N, M;
	fin1 >> N >> M;

	int **Road;
	Road = new int *[N];
	for (int i = 0; i < N; i++)
		Road[i] = new int[M];

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			fin1 >> Road[i][j];
			cout << setw(3) << Road[i][j] << " ";
		}
		cout << endl;
	}

	int Xs, Ys, Xf, Yf;
	cout << "Введите стартовые координаты робота(x, y)\n";
	cin >> Xs >> Ys;
	cout << "Введите конечные координаты робота(x, y) \n";
	cin >> Xf >> Yf;
	cout << endl << endl;

	if (N <= 0 || M <= 0 || Xs < 0 || Ys < 0 || Xf < 0 || Yf < 0 || Xs >= N || Ys >= M || Xf >= N || Yf >= M) {
		system("cls");
		throw 5;
	}

	if (Road[Xs][Ys] == -1 || Road[Xf][Yf] == -1) {
		cout << endl << endl << endl;
		cout << "Дороги нет.\n Начальная/конечная точка - болото " << endl;
		Sleep(6000);
		system("cls");
		return;
	}

	if ((Xs == Xf) && (Ys == Yf)) {
		cout << endl << endl << endl;
		cout << "Начальная и конечная точки совпадают" << endl;
		Sleep(6000);
		system("cls");
		return;
	}

	ArrayQueue Xq(100), Yq(100);

	Xq.Push(Xs);
	Yq.Push(Ys);

	int x, y;
	bool flag = true;
	while (true) {
		while (!Xq.IsEmpty()) {
			x = Xq.Pop();
			y = Yq.Pop();
			Road[x][y] = -1;
			if (x > 0 && Road[x - 1][y] == 0) {
				if (x - 1 == Xf && y == Yf) {
					cout << "Дорога существует" << endl;
					Sleep(6000);
					system("cls");
					return;
				}
				Xq.Push(x - 1);
				Yq.Push(y);
			}
			if (y < M - 1 && Road[x][y + 1] == 0) {
				if (x == Xf && y + 1 == Yf) {
					cout << "Дорога существует" << endl;
					Sleep(6000);
					system("cls");
					return;
				}
				Xq.Push(x);
				Yq.Push(y + 1);
			}
			if (x < N - 1 && Road[x + 1][y] == 0) {
				if (x + 1 == Xf && y == Yf) {
					cout << "Дорога существует" << endl;
					Sleep(6000);
					system("cls");
					return;
				}
				Xq.Push(x + 1);
				Yq.Push(y);
			}
			if (y > 0 && Road[x][y - 1] == 0) {
				if (x == Xf && y - 1 == Yf) {
					cout << "Дорога существует" << endl;
					Sleep(6000);
					system("cls");
					return;
				}
				Xq.Push(x);
				Yq.Push(y - 1);
			}
		}
		cout << "Дороги нет" << endl;
		break;
	}

	fin1.close();
	Sleep(6000);
	system("cls");
}
