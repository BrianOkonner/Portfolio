package com.company;

import java.util.Arrays;
import java.util.Comparator;

class YearOutofBounds extends Exception{}
class NegativePrice extends Exception{}
class CompRamDec implements Comparator<pc>{
    @Override
    public int compare(pc a,pc b){
        if(a.getRam()==b.getRam())
            return 0;
        else if(a.getRam()>b.getRam())
            return 1;
        else return -1;
    }
}
class CompProd implements Comparator<pc>{
    @Override
    public int compare(pc a,pc b){
        return a.getProducer().compareTo(b.getProducer());
    }
}
class pc{
protected final Integer id;
protected final String producer;
protected int memory;
protected final int productionYear;
protected int ram;
protected double price;
protected static int count=0;
enum  cpuType{single,dual, quad,octa}
protected cpuType cpuT;
public pc(String producer,int memory,int productionYear,int ram,double price,cpuType cpu) throws YearOutofBounds,NegativePrice{
    if(productionYear>2019||productionYear<1900)
        throw new YearOutofBounds();
    if(price<0)
        throw new NegativePrice();
    this.producer=producer;
    this.memory=memory;
    this.productionYear=productionYear;
    this.ram=ram;
    this.price=price;
    this.cpuT=cpu;
    count++;
    this.id=count;
}

    public cpuType getCpuT() {
        return cpuT;
    }

    public double getPrice() {
        return price;
    }

    public static int getCount() {
        return count;
    }

    public int getId() {
        return id;
    }

    public int getMemory() {
        return memory;
    }

    public int getProductionYear() {
        return productionYear;
    }

    public String getProducer() {
        return producer;
    }

    public void setCpuT(cpuType cpuT) {
        this.cpuT = cpuT;
    }

    public void setMemory(int memory) {
        this.memory = memory;
    }

    public int getRam() {
        return ram;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void setRam(int ram) {
        this.ram = ram;
    }


    public boolean equals(pc obj) {
        if (this == obj) {
            return true;
        }

        return this.id==obj.getId();
    }

    @Override
    public String toString() {
        StringBuilder s=new StringBuilder();
        s.append("ID: "+id+" Producer: "+producer+" Year: "+productionYear);
        return s.toString();
    }
}

public class Main {

    public static void main(String[] args) throws YearOutofBounds,NegativePrice {
        int k=5;
	    pc arrPc[]=new pc[k];
	    arrPc[0]=new pc("HP",8,2008,2,20, pc.cpuType.single);
        arrPc[1]=new pc("Lenovo",256,2018,8,2000, pc.cpuType.dual);
        arrPc[2]=new pc("Acer",512,2012,15,1000, pc.cpuType.quad);
        arrPc[3]=new pc("Asus",1024,2019,16,1500, pc.cpuType.octa);
        arrPc[4]=new pc("Microsoft",1024,2019,16,3000, pc.cpuType.dual);
        System.out.println("All:");
        for (int i = 0; i <k ; i++) {
            System.out.println(arrPc[i]);
        }
        System.out.println("Only dual:");
        for (int i = 0; i <k ; i++) {
            if(arrPc[i].getCpuT()== pc.cpuType.dual)
                System.out.println(arrPc[i]);
        }
        System.out.println("only with memory between 100 and 600");
        for (int i = 0; i <k ; i++) {
            if(arrPc[i].getMemory()>100&&arrPc[i].getMemory()<600)
                System.out.println(arrPc[i]);
        }
        System.out.println("sorted by ram");
        Arrays.sort(arrPc,new CompRamDec());
        for (int i = 0; i <k ; i++) {
            System.out.println(arrPc[i]);
        }
        System.out.println("Sorted by producer");
        Arrays.sort(arrPc,new CompProd());
        for (int i = 0; i <k ; i++) {
            System.out.println(arrPc[i]);
        }
	System.out.println(arrPc[0].getCount());

    }
}
