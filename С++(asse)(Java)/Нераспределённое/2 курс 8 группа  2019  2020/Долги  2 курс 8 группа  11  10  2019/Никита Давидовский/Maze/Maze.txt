// Лабиринт
package com.company;
import java.io.*;
import java.util.Arrays;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        int quan1, quan2, n = 4;
        Integer[][] maze;

        try {
            FileInputStream in = new FileInputStream("Input.txt");
            Scanner sc = new Scanner(in);
            Scanner scs = new Scanner(System.in);

            quan1 = sc.nextInt();
            quan2 = sc.nextInt();

            if (quan1 <= 0) {
                System.out.println(" Введите положительное число для размера матрицы.");
            }
            if (quan2 <= 0) {
                System.out.println(" Введите положительное число для размера матрицы.");
            }

            maze = new Integer[quan1][quan2];

            for (int i = 0; i < quan1; i++) {
                for (int k = 0; k < quan2; k++) {

                    maze[i][k] = sc.nextInt();
                }
            }

            int i = 0, k = 0;

            System.out.println(" Вас приветствует программа по поиску выхода из лабиринта.");
            System.out.println(" Нумерация координат в лабиринте начинается с 0.");
            System.out.println(" 1 обозначаются границы лабиринта, 0 обозначаются ходы лабиринта.");
            System.out.println(" 2 обозначаются координаты героя, 3 обозначается выход из лабиринта.");
            System.out.println(" Возрастающей последовательностью натуральных чисел обозначается тупиковый путь.");

            System.out.println("");
            System.out.println(" Лабиринт без героя:");
            for (int q = 0; q < maze.length; q++) {
                System.out.println(Arrays.toString(maze[q]));
            }
            System.out.println("");

            System.out.println(" Введите координаты героя:");
            do {
                i = scs.nextInt();
                k = scs.nextInt();

                if ((i<0)||(k<0)||(i>=maze.length)||(k>=maze[1].length)) {
                    System.out.println(" Вы ввели координаты меньше 0 или больше размеров лабиринта, программа завершается.");
                    return;
                }

                if (maze[i][k] == 1) {
                    System.out.println(" Введите координаты героя ,которые не будут являтся координатами границы.");
                }
            } while (maze[i][k] == 1);

            maze[i][k] = 2;

            for (int q = 0; q < maze.length; q++) {
                System.out.println(Arrays.toString(maze[q]));
            }
            System.out.println();

            if (Recursion(maze, i, k, n) == false) {
                System.out.println(" Выхода из лабиринта не существует.");
            }

            in.close();
        } catch (IOException e) {
            System.out.println("ОШИБКА");
            System.out.println("Файл не открывается");
        }
    }

    public static boolean Recursion(Integer[][] maze, int i, int k, int n) {

        maze[i][k] = 2;

        if ((i == maze.length - 1) || (k == maze[i].length - 1) || (i == 0) || (k == 0)) {

            System.out.println("Выход найден: ");

            for (int q = 0; q < maze.length; q++) {
                System.out.println(Arrays.toString(maze[q]));
            }
            return true;
        }

        if (i != 0) {
            if ((maze[i - 1][k] != 1) && (maze[i - 1][k] != 3)) {

                maze[i][k] = 3;
                n++;
                if (Recursion(maze, i - 1, k, n) == true) {
                    return true;
                }
                maze[i - 1][k] = n;
                n--;
                maze[i][k] = 2;
            }
        }
        if ((maze[i][k + 1] != 1) && (maze[i][k + 1] != 3)) {

            maze[i][k] = 3;
            n++;
            if (Recursion(maze, i, k + 1, n) == true) {
                return true;
            }
            maze[i][k + 1] = n;
            n--;
            maze[i][k] = 2;
        }
        if ((maze[i + 1][k] != 1) && (maze[i + 1][k] != 3)) {

            maze[i][k] = 3;
            n++;
            if (Recursion(maze, i + 1, k, n) == true) {
                return true;
            }
            maze[i + 1][k] = n;
            n--;
            maze[i][k] = 2;
        }
        if (k != 0) {
            if ((maze[i][k - 1] != 1) && (maze[i][k - 1] != 3)) {

                maze[i][k] = 3;
                n++;
                if (Recursion(maze, i, k - 1, n) == true) {
                    return true;
                }
                maze[i][k - 1] = n;
                n--;
                maze[i][k] = 2;
            }
        }

        return false;
    }
}