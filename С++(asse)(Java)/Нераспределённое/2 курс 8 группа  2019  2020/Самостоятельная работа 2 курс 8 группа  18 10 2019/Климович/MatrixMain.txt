class Matrix {
    private int n;
    private int m;
    private int matrix[][];

    public Matrix(int n, int m) {
        this.n = n;
        this.m = m;
        this.matrix = new int[n][m];
    }

    public Matrix(int[][] matrix) {
        this.n = matrix.length;
        this.m = matrix[0].length;
        this.matrix = matrix;
    }

    public Matrix add(Matrix another) {
        if ((this.n == another.n) && (this.m == another.m)) {
            Matrix newMatrix = new Matrix(this.n, this.m);
            for (int i = 0; i < newMatrix.n; i++) {
                for (int j = 0; j < newMatrix.m; j++) {
                    newMatrix.matrix[i][j] = this.matrix[i][j] + another.matrix[i][j];
                }
            }
            return newMatrix;
        } else {
            System.out.println("Нельзя складывать матрицы разных размеров! Возврат исходной");
            return this;
        }
    }

    public Matrix sub(Matrix another) {
        if ((this.n == another.n) && (this.m == another.m)) {
            Matrix newMatrix = new Matrix(this.n, this.m);
            for (int i = 0; i < newMatrix.n; i++) {
                for (int j = 0; j < newMatrix.m; j++) {
                    newMatrix.matrix[i][j] = this.matrix[i][j] - another.matrix[i][j];
                }
            }
            return newMatrix;
        } else {
            System.out.println("Нельзя отнимать матрицы разных размеров! Возврат исходной");
            return this;
        }
    }

    public Matrix multiply(Matrix another) {
        if (this.m == another.n) {
            Matrix newMatrix = new Matrix(this.n, another.m);
            for (int i = 0; i < this.n; i++) {
                for (int j = 0; j < another.m; j++) {
                    int sum = 0;
                    for (int k = 0; k < this.m; k++) {
                        sum = sum + this.matrix[i][k] * another.matrix[k][j];
                    }
                    newMatrix.matrix[i][j] = sum;
                }
            }
            return newMatrix;
        } else {
            System.out.println("Нельзя перемножать матрицы таких размеров! Возврат исходной");
            return this;
        }
    }

    @Override
    public String toString() {
        StringBuffer output = new StringBuffer();
        for (int i = 0; i < this.n; i++) {
            for (int j = 0; j < this.m; j++) {
                output.append(this.matrix[i][j] + "\t");
            }
            output.append("\n");
        }
        return output.toString();
    }
}

public class MatrixMain {
    public static void main(String[] args) {
        Matrix matrix1 = new Matrix(new int[][]{{1, 2, 3}});
        Matrix matrix2 = new Matrix(new int[][]{{1, 2}, {3, 4}});
        Matrix matrix3 = new Matrix(new int[][]{{3, 4}, {5, 6}});
        Matrix matrix4 = new Matrix(new int[][]{{1}, {2}});

        Matrix arrayOfMatrix[] = new Matrix[4];
        arrayOfMatrix[0] = matrix1;
        arrayOfMatrix[1] = matrix2;
        arrayOfMatrix[2] = matrix3;
        arrayOfMatrix[3] = matrix4;
        for (int i = 0; i < arrayOfMatrix.length; i++) {
            System.out.println("Матрица " + (i + 1) + ":\n" + arrayOfMatrix[i].toString());
        }

        System.out.println("Сложение второй и третьей:\n" + arrayOfMatrix[1].add(arrayOfMatrix[2]).toString());
        System.out.println("Вычитание второй из третьей:\n" + arrayOfMatrix[2].sub(arrayOfMatrix[1]).toString());
        System.out.println("Перемножение третьей и четвёртой:\n"
                + arrayOfMatrix[2].multiply(arrayOfMatrix[3]).toString());
        System.out.println("Перемножение второй и четвёртой:\n"
                + arrayOfMatrix[1].multiply(arrayOfMatrix[3]).toString());
        System.out.println("Попытка перемножения первой и четвёртой:");
        System.out.println(arrayOfMatrix[0].multiply(arrayOfMatrix[3]).toString());

    }
}